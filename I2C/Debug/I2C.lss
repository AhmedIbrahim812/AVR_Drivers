
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000326  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         00000720  00000000  00000000  0000037c  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      000004ef  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 88 01 	call	0x310	; 0x310 <main>
  64:	0c 94 91 01 	jmp	0x322	; 0x322 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <TWI_voidMastrInit>:
#include "I2C_private.h"



void TWI_voidMastrInit(u8 Copy_u8Address)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	0f 92       	push	r0
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
	//set the address at the most left 7 bits
	TWAR= Copy_u8Address<<1;
  78:	e2 e2       	ldi	r30, 0x22	; 34
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	88 0f       	add	r24, r24
  80:	80 83       	st	Z, r24

	// bit rate Pre scaler = 1 (no pre scaler)
	CLR_BIT(TWSR,TWSR_TWPS0);
  82:	a1 e2       	ldi	r26, 0x21	; 33
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e1 e2       	ldi	r30, 0x21	; 33
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8e 7f       	andi	r24, 0xFE	; 254
  8e:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS1);
  90:	a1 e2       	ldi	r26, 0x21	; 33
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e1 e2       	ldi	r30, 0x21	; 33
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	8c 93       	st	X, r24

	// clock prescaler = 16
	TWBR=2;
  9e:	e0 e2       	ldi	r30, 0x20	; 32
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	82 e0       	ldi	r24, 0x02	; 2
  a4:	80 83       	st	Z, r24

	//enable ack
	SET_BIT(TWCR,TWCR_TWEA);
  a6:	a6 e5       	ldi	r26, 0x56	; 86
  a8:	b0 e0       	ldi	r27, 0x00	; 0
  aa:	e6 e5       	ldi	r30, 0x56	; 86
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	80 81       	ld	r24, Z
  b0:	80 64       	ori	r24, 0x40	; 64
  b2:	8c 93       	st	X, r24

	// I2C enable
	SET_BIT(TWCR,TWCR_TWEN);
  b4:	a6 e5       	ldi	r26, 0x56	; 86
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	e6 e5       	ldi	r30, 0x56	; 86
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	8c 93       	st	X, r24

}
  c2:	0f 90       	pop	r0
  c4:	cf 91       	pop	r28
  c6:	df 91       	pop	r29
  c8:	08 95       	ret

000000ca <TWI_voidSlaveInit>:
void TWI_voidSlaveInit(u8 Copy_u8Address)
{
  ca:	df 93       	push	r29
  cc:	cf 93       	push	r28
  ce:	0f 92       	push	r0
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	89 83       	std	Y+1, r24	; 0x01
	TWAR= Copy_u8Address<<1;
  d6:	e2 e2       	ldi	r30, 0x22	; 34
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	88 0f       	add	r24, r24
  de:	80 83       	st	Z, r24

	//enable ack
	SET_BIT(TWCR,TWCR_TWEA);
  e0:	a6 e5       	ldi	r26, 0x56	; 86
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e6 e5       	ldi	r30, 0x56	; 86
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	8c 93       	st	X, r24
	// I2C enable
	SET_BIT(TWCR,TWCR_TWEN);
  ee:	a6 e5       	ldi	r26, 0x56	; 86
  f0:	b0 e0       	ldi	r27, 0x00	; 0
  f2:	e6 e5       	ldi	r30, 0x56	; 86
  f4:	f0 e0       	ldi	r31, 0x00	; 0
  f6:	80 81       	ld	r24, Z
  f8:	84 60       	ori	r24, 0x04	; 4
  fa:	8c 93       	st	X, r24

}
  fc:	0f 90       	pop	r0
  fe:	cf 91       	pop	r28
 100:	df 91       	pop	r29
 102:	08 95       	ret

00000104 <TWI_SendStartCondition>:
TWI_state TWI_SendStartCondition(void){
 104:	df 93       	push	r29
 106:	cf 93       	push	r28
 108:	0f 92       	push	r0
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	//send data and return error type if any
	u8 local_error=no_error;
 10e:	19 82       	std	Y+1, r1	; 0x01

	// Start Condition
	SET_BIT(TWCR,TWCR_TWSTA);
 110:	a6 e5       	ldi	r26, 0x56	; 86
 112:	b0 e0       	ldi	r27, 0x00	; 0
 114:	e6 e5       	ldi	r30, 0x56	; 86
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	80 62       	ori	r24, 0x20	; 32
 11c:	8c 93       	st	X, r24
	// Clear I2C interrupt flag
	SET_BIT(TWCR,TWCR_TWINT);
 11e:	a6 e5       	ldi	r26, 0x56	; 86
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e6 e5       	ldi	r30, 0x56	; 86
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 68       	ori	r24, 0x80	; 128
 12a:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,TWCR_TWINT)==0);
 12c:	e6 e5       	ldi	r30, 0x56	; 86
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	88 23       	and	r24, r24
 134:	dc f7       	brge	.-10     	; 0x12c <TWI_SendStartCondition+0x28>
	if ((TWSR&0b11111000)==START_ACK)
 136:	e1 e2       	ldi	r30, 0x21	; 33
 138:	f0 e0       	ldi	r31, 0x00	; 0
 13a:	80 81       	ld	r24, Z
 13c:	88 2f       	mov	r24, r24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	88 7f       	andi	r24, 0xF8	; 248
 142:	90 70       	andi	r25, 0x00	; 0
 144:	88 30       	cpi	r24, 0x08	; 8
 146:	91 05       	cpc	r25, r1
 148:	11 f0       	breq	.+4      	; 0x14e <TWI_SendStartCondition+0x4a>
	{
	}
	else
		local_error=start_error;
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	89 83       	std	Y+1, r24	; 0x01
	return local_error;
 14e:	89 81       	ldd	r24, Y+1	; 0x01
}
 150:	0f 90       	pop	r0
 152:	cf 91       	pop	r28
 154:	df 91       	pop	r29
 156:	08 95       	ret

00000158 <TWI_SendSlaveAddressWithWrite>:
TWI_state TWI_SendSlaveAddressWithWrite(u8 Copy_u8Address)
{
 158:	df 93       	push	r29
 15a:	cf 93       	push	r28
 15c:	00 d0       	rcall	.+0      	; 0x15e <TWI_SendSlaveAddressWithWrite+0x6>
 15e:	cd b7       	in	r28, 0x3d	; 61
 160:	de b7       	in	r29, 0x3e	; 62
 162:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_error=no_error;
 164:	19 82       	std	Y+1, r1	; 0x01
	// clear start condition, It has been already sent
	CLR_BIT(TWCR,TWCR_TWSTA);
 166:	a6 e5       	ldi	r26, 0x56	; 86
 168:	b0 e0       	ldi	r27, 0x00	; 0
 16a:	e6 e5       	ldi	r30, 0x56	; 86
 16c:	f0 e0       	ldi	r31, 0x00	; 0
 16e:	80 81       	ld	r24, Z
 170:	8f 7d       	andi	r24, 0xDF	; 223
 172:	8c 93       	st	X, r24
	TWDR=Copy_u8Address<<1;
 174:	e3 e2       	ldi	r30, 0x23	; 35
 176:	f0 e0       	ldi	r31, 0x00	; 0
 178:	8a 81       	ldd	r24, Y+2	; 0x02
 17a:	88 0f       	add	r24, r24
 17c:	80 83       	st	Z, r24

	//write
	CLR_BIT(TWDR,0);
 17e:	a3 e2       	ldi	r26, 0x23	; 35
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	e3 e2       	ldi	r30, 0x23	; 35
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	8c 93       	st	X, r24

	// Clear I2C interrupt flag
	SET_BIT(TWCR,TWCR_TWINT);
 18c:	a6 e5       	ldi	r26, 0x56	; 86
 18e:	b0 e0       	ldi	r27, 0x00	; 0
 190:	e6 e5       	ldi	r30, 0x56	; 86
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	80 68       	ori	r24, 0x80	; 128
 198:	8c 93       	st	X, r24
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
 19a:	e6 e5       	ldi	r30, 0x56	; 86
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 23       	and	r24, r24
 1a2:	dc f7       	brge	.-10     	; 0x19a <TWI_SendSlaveAddressWithWrite+0x42>
	if ((TWSR&0b11111000)==SLAVE_ADD_AND_WR_ACK)
 1a4:	e1 e2       	ldi	r30, 0x21	; 33
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	88 2f       	mov	r24, r24
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	88 7f       	andi	r24, 0xF8	; 248
 1b0:	90 70       	andi	r25, 0x00	; 0
 1b2:	88 31       	cpi	r24, 0x18	; 24
 1b4:	91 05       	cpc	r25, r1
 1b6:	11 f0       	breq	.+4      	; 0x1bc <TWI_SendSlaveAddressWithWrite+0x64>
	{
	}
	else
		local_error= slave_addresswith_write_error;
 1b8:	82 e0       	ldi	r24, 0x02	; 2
 1ba:	89 83       	std	Y+1, r24	; 0x01
	return local_error;
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
}
 1be:	0f 90       	pop	r0
 1c0:	0f 90       	pop	r0
 1c2:	cf 91       	pop	r28
 1c4:	df 91       	pop	r29
 1c6:	08 95       	ret

000001c8 <TWI_SendSlaveAddressWithRead>:
TWI_state TWI_SendSlaveAddressWithRead(u8 Copy_u8Address){
 1c8:	df 93       	push	r29
 1ca:	cf 93       	push	r28
 1cc:	00 d0       	rcall	.+0      	; 0x1ce <TWI_SendSlaveAddressWithRead+0x6>
 1ce:	cd b7       	in	r28, 0x3d	; 61
 1d0:	de b7       	in	r29, 0x3e	; 62
 1d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_error=no_error;
 1d4:	19 82       	std	Y+1, r1	; 0x01
	// clear start condition, It has been already sent
	CLR_BIT(TWCR,TWCR_TWSTA);
 1d6:	a6 e5       	ldi	r26, 0x56	; 86
 1d8:	b0 e0       	ldi	r27, 0x00	; 0
 1da:	e6 e5       	ldi	r30, 0x56	; 86
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	80 81       	ld	r24, Z
 1e0:	8f 7d       	andi	r24, 0xDF	; 223
 1e2:	8c 93       	st	X, r24
	TWDR=Copy_u8Address<<1;
 1e4:	e3 e2       	ldi	r30, 0x23	; 35
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	8a 81       	ldd	r24, Y+2	; 0x02
 1ea:	88 0f       	add	r24, r24
 1ec:	80 83       	st	Z, r24

	//READ
	SET_BIT(TWDR,0);
 1ee:	a3 e2       	ldi	r26, 0x23	; 35
 1f0:	b0 e0       	ldi	r27, 0x00	; 0
 1f2:	e3 e2       	ldi	r30, 0x23	; 35
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	8c 93       	st	X, r24

	// Clear I2C interrupt flag
	SET_BIT(TWCR,TWCR_TWINT);
 1fc:	a6 e5       	ldi	r26, 0x56	; 86
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	e6 e5       	ldi	r30, 0x56	; 86
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	80 68       	ori	r24, 0x80	; 128
 208:	8c 93       	st	X, r24
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
 20a:	e6 e5       	ldi	r30, 0x56	; 86
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	dc f7       	brge	.-10     	; 0x20a <TWI_SendSlaveAddressWithRead+0x42>
	if ((TWSR&0b11111000)==SLAVE_ADD_AND_RD_ACK)
 214:	e1 e2       	ldi	r30, 0x21	; 33
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	88 2f       	mov	r24, r24
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	88 7f       	andi	r24, 0xF8	; 248
 220:	90 70       	andi	r25, 0x00	; 0
 222:	80 34       	cpi	r24, 0x40	; 64
 224:	91 05       	cpc	r25, r1
 226:	11 f0       	breq	.+4      	; 0x22c <TWI_SendSlaveAddressWithRead+0x64>
	{
	}
	else
		local_error= slave_addresswith_read_error;
 228:	83 e0       	ldi	r24, 0x03	; 3
 22a:	89 83       	std	Y+1, r24	; 0x01
	return local_error;
 22c:	89 81       	ldd	r24, Y+1	; 0x01
}
 22e:	0f 90       	pop	r0
 230:	0f 90       	pop	r0
 232:	cf 91       	pop	r28
 234:	df 91       	pop	r29
 236:	08 95       	ret

00000238 <TWI_MasterWriteDataByte>:
TWI_state TWI_MasterWriteDataByte(u8 Copy_u8Data)
{
 238:	df 93       	push	r29
 23a:	cf 93       	push	r28
 23c:	00 d0       	rcall	.+0      	; 0x23e <TWI_MasterWriteDataByte+0x6>
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_error=no_error;
 244:	19 82       	std	Y+1, r1	; 0x01
	// Assign data to data register
	TWDR=Copy_u8Data;
 246:	e3 e2       	ldi	r30, 0x23	; 35
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	8a 81       	ldd	r24, Y+2	; 0x02
 24c:	80 83       	st	Z, r24

	// Clear I2C interrupt flag
	SET_BIT(TWCR,TWCR_TWINT);
 24e:	a6 e5       	ldi	r26, 0x56	; 86
 250:	b0 e0       	ldi	r27, 0x00	; 0
 252:	e6 e5       	ldi	r30, 0x56	; 86
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	80 81       	ld	r24, Z
 258:	80 68       	ori	r24, 0x80	; 128
 25a:	8c 93       	st	X, r24
	while(GET_BIT(TWCR,TWCR_TWINT)==0);
 25c:	e6 e5       	ldi	r30, 0x56	; 86
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	80 81       	ld	r24, Z
 262:	88 23       	and	r24, r24
 264:	dc f7       	brge	.-10     	; 0x25c <TWI_MasterWriteDataByte+0x24>
	if ((TWSR&0b11111000)==MSTR_WR_BYTE_WITH_ACK)
 266:	e1 e2       	ldi	r30, 0x21	; 33
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	88 2f       	mov	r24, r24
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	88 7f       	andi	r24, 0xF8	; 248
 272:	90 70       	andi	r25, 0x00	; 0
 274:	88 32       	cpi	r24, 0x28	; 40
 276:	91 05       	cpc	r25, r1
 278:	11 f0       	breq	.+4      	; 0x27e <TWI_MasterWriteDataByte+0x46>
	{
	}
	else
		local_error= master_write_data_error;
 27a:	85 e0       	ldi	r24, 0x05	; 5
 27c:	89 83       	std	Y+1, r24	; 0x01
	return local_error;
 27e:	89 81       	ldd	r24, Y+1	; 0x01

}
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	cf 91       	pop	r28
 286:	df 91       	pop	r29
 288:	08 95       	ret

0000028a <TWI_MasterReadDataByte>:
TWI_state TWI_MasterReadDataByte(u8 *Copy_u8Data)
{
 28a:	df 93       	push	r29
 28c:	cf 93       	push	r28
 28e:	00 d0       	rcall	.+0      	; 0x290 <TWI_MasterReadDataByte+0x6>
 290:	0f 92       	push	r0
 292:	cd b7       	in	r28, 0x3d	; 61
 294:	de b7       	in	r29, 0x3e	; 62
 296:	9b 83       	std	Y+3, r25	; 0x03
 298:	8a 83       	std	Y+2, r24	; 0x02

	u8 local_error=no_error;
 29a:	19 82       	std	Y+1, r1	; 0x01

	// Clear I2C interrupt flag
	SET_BIT(TWCR,TWCR_TWINT);
 29c:	a6 e5       	ldi	r26, 0x56	; 86
 29e:	b0 e0       	ldi	r27, 0x00	; 0
 2a0:	e6 e5       	ldi	r30, 0x56	; 86
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	80 81       	ld	r24, Z
 2a6:	80 68       	ori	r24, 0x80	; 128
 2a8:	8c 93       	st	X, r24

	while(GET_BIT(TWCR,TWCR_TWINT)==0);
 2aa:	e6 e5       	ldi	r30, 0x56	; 86
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	88 23       	and	r24, r24
 2b2:	dc f7       	brge	.-10     	; 0x2aa <TWI_MasterReadDataByte+0x20>
	if ((TWSR&0b11111000)==MSTR_RD_BYTE_WITH_ACK)
 2b4:	e1 e2       	ldi	r30, 0x21	; 33
 2b6:	f0 e0       	ldi	r31, 0x00	; 0
 2b8:	80 81       	ld	r24, Z
 2ba:	88 2f       	mov	r24, r24
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	88 7f       	andi	r24, 0xF8	; 248
 2c0:	90 70       	andi	r25, 0x00	; 0
 2c2:	80 35       	cpi	r24, 0x50	; 80
 2c4:	91 05       	cpc	r25, r1
 2c6:	11 f0       	breq	.+4      	; 0x2cc <TWI_MasterReadDataByte+0x42>
	{
	}
	else
		local_error= master_read_data_error;
 2c8:	84 e0       	ldi	r24, 0x04	; 4
 2ca:	89 83       	std	Y+1, r24	; 0x01

	// return the data in data register into an address
	*Copy_u8Data=TWDR;
 2cc:	e3 e2       	ldi	r30, 0x23	; 35
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	ea 81       	ldd	r30, Y+2	; 0x02
 2d4:	fb 81       	ldd	r31, Y+3	; 0x03
 2d6:	80 83       	st	Z, r24
	return local_error;
 2d8:	89 81       	ldd	r24, Y+1	; 0x01


}
 2da:	0f 90       	pop	r0
 2dc:	0f 90       	pop	r0
 2de:	0f 90       	pop	r0
 2e0:	cf 91       	pop	r28
 2e2:	df 91       	pop	r29
 2e4:	08 95       	ret

000002e6 <TWI_SendStopCondition>:
void TWI_SendStopCondition(void)
{
 2e6:	df 93       	push	r29
 2e8:	cf 93       	push	r28
 2ea:	cd b7       	in	r28, 0x3d	; 61
 2ec:	de b7       	in	r29, 0x3e	; 62
	//Stop condition
	SET_BIT(TWCR,TWCR_TWSTO);
 2ee:	a6 e5       	ldi	r26, 0x56	; 86
 2f0:	b0 e0       	ldi	r27, 0x00	; 0
 2f2:	e6 e5       	ldi	r30, 0x56	; 86
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	80 61       	ori	r24, 0x10	; 16
 2fa:	8c 93       	st	X, r24

	// Clear I2C interrupt flag
	SET_BIT(TWCR,TWCR_TWINT);
 2fc:	a6 e5       	ldi	r26, 0x56	; 86
 2fe:	b0 e0       	ldi	r27, 0x00	; 0
 300:	e6 e5       	ldi	r30, 0x56	; 86
 302:	f0 e0       	ldi	r31, 0x00	; 0
 304:	80 81       	ld	r24, Z
 306:	80 68       	ori	r24, 0x80	; 128
 308:	8c 93       	st	X, r24
}
 30a:	cf 91       	pop	r28
 30c:	df 91       	pop	r29
 30e:	08 95       	ret

00000310 <main>:
#include "BIT_MATH.h"
#include "STD_TYPES.h"
#include "I2C_interface.h"

int main()
{
 310:	df 93       	push	r29
 312:	cf 93       	push	r28
 314:	cd b7       	in	r28, 0x3d	; 61
 316:	de b7       	in	r29, 0x3e	; 62

	// Try to test my self-made I2C driver
	// HAVE FUN !


return 0;
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
}
 31c:	cf 91       	pop	r28
 31e:	df 91       	pop	r29
 320:	08 95       	ret

00000322 <_exit>:
 322:	f8 94       	cli

00000324 <__stop_program>:
 324:	ff cf       	rjmp	.-2      	; 0x324 <__stop_program>
