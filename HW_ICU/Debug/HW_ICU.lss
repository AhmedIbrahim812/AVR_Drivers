
HW_ICU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00001e78  00001f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080007e  0080007e  00001f2a  2**0
                  ALLOC
  3 .stab         00001a7c  00000000  00000000  00001f2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000db9  00000000  00000000  000039a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00004761  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000048a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00004a11  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000665a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00007545  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000082f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00008454  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000086e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008eaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 62 0d 	jmp	0x1ac4	; 0x1ac4 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 ee 0d 	jmp	0x1bdc	; 0x1bdc <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 37       	cpi	r26, 0x7E	; 126
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae e7       	ldi	r26, 0x7E	; 126
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 38       	cpi	r26, 0x8D	; 141
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <main>
      8a:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e7       	ldi	r26, 0x76	; 118
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 0f 	jmp	0x1e06	; 0x1e06 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	86 e7       	ldi	r24, 0x76	; 118
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2b 0f 	jmp	0x1e56	; 0x1e56 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 0f 	jmp	0x1e26	; 0x1e26 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2f 0f 	jmp	0x1e5e	; 0x1e5e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <CLCD_voidSendCommand>:




void CLCD_voidSendCommand(u8 Copy_u8Command)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2f 97       	sbiw	r28, 0x0f	; 15
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	8f 87       	std	Y+15, r24	; 0x0f
	//Set RS->0 , Set RW ->0  for send command
	DIO_voidSetPinVal(CLCD_CTRL_PORT,RS,PIN_VAL_LOW);
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	40 e0       	ldi	r20, 0x00	; 0
     b62:	0e 94 48 0b 	call	0x1690	; 0x1690 <DIO_voidSetPinVal>
	DIO_voidSetPinVal(CLCD_CTRL_PORT,RW,PIN_VAL_LOW);
     b66:	83 e0       	ldi	r24, 0x03	; 3
     b68:	61 e0       	ldi	r22, 0x01	; 1
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	0e 94 48 0b 	call	0x1690	; 0x1690 <DIO_voidSetPinVal>
     DIO_voidSetPortVal(CLCD_DATA_PORT,Copy_u8Command);
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	6f 85       	ldd	r22, Y+15	; 0x0f
     b74:	0e 94 06 0b 	call	0x160c	; 0x160c <DIO_voidSetPortVal>

  // SET ENable PULSE
     DIO_voidSetPinVal(CLCD_CTRL_PORT,EN,PIN_VAL_HIGH);
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	62 e0       	ldi	r22, 0x02	; 2
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	0e 94 48 0b 	call	0x1690	; 0x1690 <DIO_voidSetPinVal>
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	90 e0       	ldi	r25, 0x00	; 0
     b86:	a0 e8       	ldi	r26, 0x80	; 128
     b88:	bf e3       	ldi	r27, 0x3F	; 63
     b8a:	8b 87       	std	Y+11, r24	; 0x0b
     b8c:	9c 87       	std	Y+12, r25	; 0x0c
     b8e:	ad 87       	std	Y+13, r26	; 0x0d
     b90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b92:	6b 85       	ldd	r22, Y+11	; 0x0b
     b94:	7c 85       	ldd	r23, Y+12	; 0x0c
     b96:	8d 85       	ldd	r24, Y+13	; 0x0d
     b98:	9e 85       	ldd	r25, Y+14	; 0x0e
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e7       	ldi	r20, 0x7A	; 122
     ba0:	53 e4       	ldi	r21, 0x43	; 67
     ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	8f 83       	std	Y+7, r24	; 0x07
     bac:	98 87       	std	Y+8, r25	; 0x08
     bae:	a9 87       	std	Y+9, r26	; 0x09
     bb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bb2:	6f 81       	ldd	r22, Y+7	; 0x07
     bb4:	78 85       	ldd	r23, Y+8	; 0x08
     bb6:	89 85       	ldd	r24, Y+9	; 0x09
     bb8:	9a 85       	ldd	r25, Y+10	; 0x0a
     bba:	20 e0       	ldi	r18, 0x00	; 0
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	40 e8       	ldi	r20, 0x80	; 128
     bc0:	5f e3       	ldi	r21, 0x3F	; 63
     bc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bc6:	88 23       	and	r24, r24
     bc8:	2c f4       	brge	.+10     	; 0xbd4 <CLCD_voidSendCommand+0x8e>
		__ticks = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	9e 83       	std	Y+6, r25	; 0x06
     bd0:	8d 83       	std	Y+5, r24	; 0x05
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <CLCD_voidSendCommand+0x10c>
	else if (__tmp > 65535)
     bd4:	6f 81       	ldd	r22, Y+7	; 0x07
     bd6:	78 85       	ldd	r23, Y+8	; 0x08
     bd8:	89 85       	ldd	r24, Y+9	; 0x09
     bda:	9a 85       	ldd	r25, Y+10	; 0x0a
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	4f e7       	ldi	r20, 0x7F	; 127
     be2:	57 e4       	ldi	r21, 0x47	; 71
     be4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be8:	18 16       	cp	r1, r24
     bea:	4c f5       	brge	.+82     	; 0xc3e <CLCD_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bec:	6b 85       	ldd	r22, Y+11	; 0x0b
     bee:	7c 85       	ldd	r23, Y+12	; 0x0c
     bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
     bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e 83       	std	Y+6, r25	; 0x06
     c12:	8d 83       	std	Y+5, r24	; 0x05
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <CLCD_voidSendCommand+0xee>
     c16:	89 e1       	ldi	r24, 0x19	; 25
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c 83       	std	Y+4, r25	; 0x04
     c1c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b 81       	ldd	r24, Y+3	; 0x03
     c20:	9c 81       	ldd	r25, Y+4	; 0x04
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <CLCD_voidSendCommand+0xdc>
     c26:	9c 83       	std	Y+4, r25	; 0x04
     c28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d 81       	ldd	r24, Y+5	; 0x05
     c2c:	9e 81       	ldd	r25, Y+6	; 0x06
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <CLCD_voidSendCommand+0xd0>
     c3c:	14 c0       	rjmp	.+40     	; 0xc66 <CLCD_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	6f 81       	ldd	r22, Y+7	; 0x07
     c40:	78 85       	ldd	r23, Y+8	; 0x08
     c42:	89 85       	ldd	r24, Y+9	; 0x09
     c44:	9a 85       	ldd	r25, Y+10	; 0x0a
     c46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	9e 83       	std	Y+6, r25	; 0x06
     c50:	8d 83       	std	Y+5, r24	; 0x05
     c52:	8d 81       	ldd	r24, Y+5	; 0x05
     c54:	9e 81       	ldd	r25, Y+6	; 0x06
     c56:	9a 83       	std	Y+2, r25	; 0x02
     c58:	89 83       	std	Y+1, r24	; 0x01
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	9a 81       	ldd	r25, Y+2	; 0x02
     c5e:	01 97       	sbiw	r24, 0x01	; 1
     c60:	f1 f7       	brne	.-4      	; 0xc5e <CLCD_voidSendCommand+0x118>
     c62:	9a 83       	std	Y+2, r25	; 0x02
     c64:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
  DIO_voidSetPinVal(CLCD_CTRL_PORT,EN,PIN_VAL_LOW);
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	62 e0       	ldi	r22, 0x02	; 2
     c6a:	40 e0       	ldi	r20, 0x00	; 0
     c6c:	0e 94 48 0b 	call	0x1690	; 0x1690 <DIO_voidSetPinVal>

}
     c70:	2f 96       	adiw	r28, 0x0f	; 15
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	cf 91       	pop	r28
     c7e:	df 91       	pop	r29
     c80:	08 95       	ret

00000c82 <CLCD_voidSendData>:



void CLCD_voidSendData(u8 Copy_u8Data)
{
     c82:	df 93       	push	r29
     c84:	cf 93       	push	r28
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	2f 97       	sbiw	r28, 0x0f	; 15
     c8c:	0f b6       	in	r0, 0x3f	; 63
     c8e:	f8 94       	cli
     c90:	de bf       	out	0x3e, r29	; 62
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	cd bf       	out	0x3d, r28	; 61
     c96:	8f 87       	std	Y+15, r24	; 0x0f
  //Set RS->1 , Set RW ->0  for send command
  DIO_voidSetPinVal(CLCD_CTRL_PORT,RS,PIN_VAL_HIGH);
     c98:	83 e0       	ldi	r24, 0x03	; 3
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	0e 94 48 0b 	call	0x1690	; 0x1690 <DIO_voidSetPinVal>
  DIO_voidSetPinVal(CLCD_CTRL_PORT,RW,PIN_VAL_LOW);
     ca2:	83 e0       	ldi	r24, 0x03	; 3
     ca4:	61 e0       	ldi	r22, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	0e 94 48 0b 	call	0x1690	; 0x1690 <DIO_voidSetPinVal>
  DIO_voidSetPortVal(CLCD_DATA_PORT,Copy_u8Data);
     cac:	81 e0       	ldi	r24, 0x01	; 1
     cae:	6f 85       	ldd	r22, Y+15	; 0x0f
     cb0:	0e 94 06 0b 	call	0x160c	; 0x160c <DIO_voidSetPortVal>

  // SET ENable PULSE
  DIO_voidSetPinVal(CLCD_CTRL_PORT,EN,PIN_VAL_HIGH);
     cb4:	83 e0       	ldi	r24, 0x03	; 3
     cb6:	62 e0       	ldi	r22, 0x02	; 2
     cb8:	41 e0       	ldi	r20, 0x01	; 1
     cba:	0e 94 48 0b 	call	0x1690	; 0x1690 <DIO_voidSetPinVal>
     cbe:	80 e0       	ldi	r24, 0x00	; 0
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	a0 e8       	ldi	r26, 0x80	; 128
     cc4:	bf e3       	ldi	r27, 0x3F	; 63
     cc6:	8b 87       	std	Y+11, r24	; 0x0b
     cc8:	9c 87       	std	Y+12, r25	; 0x0c
     cca:	ad 87       	std	Y+13, r26	; 0x0d
     ccc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cce:	6b 85       	ldd	r22, Y+11	; 0x0b
     cd0:	7c 85       	ldd	r23, Y+12	; 0x0c
     cd2:	8d 85       	ldd	r24, Y+13	; 0x0d
     cd4:	9e 85       	ldd	r25, Y+14	; 0x0e
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	4a e7       	ldi	r20, 0x7A	; 122
     cdc:	53 e4       	ldi	r21, 0x43	; 67
     cde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce2:	dc 01       	movw	r26, r24
     ce4:	cb 01       	movw	r24, r22
     ce6:	8f 83       	std	Y+7, r24	; 0x07
     ce8:	98 87       	std	Y+8, r25	; 0x08
     cea:	a9 87       	std	Y+9, r26	; 0x09
     cec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     cee:	6f 81       	ldd	r22, Y+7	; 0x07
     cf0:	78 85       	ldd	r23, Y+8	; 0x08
     cf2:	89 85       	ldd	r24, Y+9	; 0x09
     cf4:	9a 85       	ldd	r25, Y+10	; 0x0a
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 e8       	ldi	r20, 0x80	; 128
     cfc:	5f e3       	ldi	r21, 0x3F	; 63
     cfe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d02:	88 23       	and	r24, r24
     d04:	2c f4       	brge	.+10     	; 0xd10 <CLCD_voidSendData+0x8e>
		__ticks = 1;
     d06:	81 e0       	ldi	r24, 0x01	; 1
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9e 83       	std	Y+6, r25	; 0x06
     d0c:	8d 83       	std	Y+5, r24	; 0x05
     d0e:	3f c0       	rjmp	.+126    	; 0xd8e <CLCD_voidSendData+0x10c>
	else if (__tmp > 65535)
     d10:	6f 81       	ldd	r22, Y+7	; 0x07
     d12:	78 85       	ldd	r23, Y+8	; 0x08
     d14:	89 85       	ldd	r24, Y+9	; 0x09
     d16:	9a 85       	ldd	r25, Y+10	; 0x0a
     d18:	20 e0       	ldi	r18, 0x00	; 0
     d1a:	3f ef       	ldi	r19, 0xFF	; 255
     d1c:	4f e7       	ldi	r20, 0x7F	; 127
     d1e:	57 e4       	ldi	r21, 0x47	; 71
     d20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d24:	18 16       	cp	r1, r24
     d26:	4c f5       	brge	.+82     	; 0xd7a <CLCD_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d28:	6b 85       	ldd	r22, Y+11	; 0x0b
     d2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	20 e0       	ldi	r18, 0x00	; 0
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	40 e2       	ldi	r20, 0x20	; 32
     d36:	51 e4       	ldi	r21, 0x41	; 65
     d38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3c:	dc 01       	movw	r26, r24
     d3e:	cb 01       	movw	r24, r22
     d40:	bc 01       	movw	r22, r24
     d42:	cd 01       	movw	r24, r26
     d44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d48:	dc 01       	movw	r26, r24
     d4a:	cb 01       	movw	r24, r22
     d4c:	9e 83       	std	Y+6, r25	; 0x06
     d4e:	8d 83       	std	Y+5, r24	; 0x05
     d50:	0f c0       	rjmp	.+30     	; 0xd70 <CLCD_voidSendData+0xee>
     d52:	89 e1       	ldi	r24, 0x19	; 25
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9c 83       	std	Y+4, r25	; 0x04
     d58:	8b 83       	std	Y+3, r24	; 0x03
     d5a:	8b 81       	ldd	r24, Y+3	; 0x03
     d5c:	9c 81       	ldd	r25, Y+4	; 0x04
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	f1 f7       	brne	.-4      	; 0xd5e <CLCD_voidSendData+0xdc>
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d66:	8d 81       	ldd	r24, Y+5	; 0x05
     d68:	9e 81       	ldd	r25, Y+6	; 0x06
     d6a:	01 97       	sbiw	r24, 0x01	; 1
     d6c:	9e 83       	std	Y+6, r25	; 0x06
     d6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d70:	8d 81       	ldd	r24, Y+5	; 0x05
     d72:	9e 81       	ldd	r25, Y+6	; 0x06
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	69 f7       	brne	.-38     	; 0xd52 <CLCD_voidSendData+0xd0>
     d78:	14 c0       	rjmp	.+40     	; 0xda2 <CLCD_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7a:	6f 81       	ldd	r22, Y+7	; 0x07
     d7c:	78 85       	ldd	r23, Y+8	; 0x08
     d7e:	89 85       	ldd	r24, Y+9	; 0x09
     d80:	9a 85       	ldd	r25, Y+10	; 0x0a
     d82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	9e 83       	std	Y+6, r25	; 0x06
     d8c:	8d 83       	std	Y+5, r24	; 0x05
     d8e:	8d 81       	ldd	r24, Y+5	; 0x05
     d90:	9e 81       	ldd	r25, Y+6	; 0x06
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
     d96:	89 81       	ldd	r24, Y+1	; 0x01
     d98:	9a 81       	ldd	r25, Y+2	; 0x02
     d9a:	01 97       	sbiw	r24, 0x01	; 1
     d9c:	f1 f7       	brne	.-4      	; 0xd9a <CLCD_voidSendData+0x118>
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
  _delay_ms(1);
  DIO_voidSetPinVal(CLCD_CTRL_PORT,EN,PIN_VAL_LOW);
     da2:	83 e0       	ldi	r24, 0x03	; 3
     da4:	62 e0       	ldi	r22, 0x02	; 2
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	0e 94 48 0b 	call	0x1690	; 0x1690 <DIO_voidSetPinVal>

}
     dac:	2f 96       	adiw	r28, 0x0f	; 15
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61
     db8:	cf 91       	pop	r28
     dba:	df 91       	pop	r29
     dbc:	08 95       	ret

00000dbe <CLCD_voidInit>:


void CLCD_voidInit(void)
{
     dbe:	df 93       	push	r29
     dc0:	cf 93       	push	r28
     dc2:	cd b7       	in	r28, 0x3d	; 61
     dc4:	de b7       	in	r29, 0x3e	; 62
     dc6:	e8 97       	sbiw	r28, 0x38	; 56
     dc8:	0f b6       	in	r0, 0x3f	; 63
     dca:	f8 94       	cli
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	0f be       	out	0x3f, r0	; 63
     dd0:	cd bf       	out	0x3d, r28	; 61
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e2       	ldi	r26, 0x20	; 32
     dd8:	b2 e4       	ldi	r27, 0x42	; 66
     dda:	8d ab       	std	Y+53, r24	; 0x35
     ddc:	9e ab       	std	Y+54, r25	; 0x36
     dde:	af ab       	std	Y+55, r26	; 0x37
     de0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de2:	6d a9       	ldd	r22, Y+53	; 0x35
     de4:	7e a9       	ldd	r23, Y+54	; 0x36
     de6:	8f a9       	ldd	r24, Y+55	; 0x37
     de8:	98 ad       	ldd	r25, Y+56	; 0x38
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a e7       	ldi	r20, 0x7A	; 122
     df0:	53 e4       	ldi	r21, 0x43	; 67
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	89 ab       	std	Y+49, r24	; 0x31
     dfc:	9a ab       	std	Y+50, r25	; 0x32
     dfe:	ab ab       	std	Y+51, r26	; 0x33
     e00:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e02:	69 a9       	ldd	r22, Y+49	; 0x31
     e04:	7a a9       	ldd	r23, Y+50	; 0x32
     e06:	8b a9       	ldd	r24, Y+51	; 0x33
     e08:	9c a9       	ldd	r25, Y+52	; 0x34
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e16:	88 23       	and	r24, r24
     e18:	2c f4       	brge	.+10     	; 0xe24 <CLCD_voidInit+0x66>
		__ticks = 1;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	98 ab       	std	Y+48, r25	; 0x30
     e20:	8f a7       	std	Y+47, r24	; 0x2f
     e22:	3f c0       	rjmp	.+126    	; 0xea2 <CLCD_voidInit+0xe4>
	else if (__tmp > 65535)
     e24:	69 a9       	ldd	r22, Y+49	; 0x31
     e26:	7a a9       	ldd	r23, Y+50	; 0x32
     e28:	8b a9       	ldd	r24, Y+51	; 0x33
     e2a:	9c a9       	ldd	r25, Y+52	; 0x34
     e2c:	20 e0       	ldi	r18, 0x00	; 0
     e2e:	3f ef       	ldi	r19, 0xFF	; 255
     e30:	4f e7       	ldi	r20, 0x7F	; 127
     e32:	57 e4       	ldi	r21, 0x47	; 71
     e34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e38:	18 16       	cp	r1, r24
     e3a:	4c f5       	brge	.+82     	; 0xe8e <CLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e3c:	6d a9       	ldd	r22, Y+53	; 0x35
     e3e:	7e a9       	ldd	r23, Y+54	; 0x36
     e40:	8f a9       	ldd	r24, Y+55	; 0x37
     e42:	98 ad       	ldd	r25, Y+56	; 0x38
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	40 e2       	ldi	r20, 0x20	; 32
     e4a:	51 e4       	ldi	r21, 0x41	; 65
     e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e50:	dc 01       	movw	r26, r24
     e52:	cb 01       	movw	r24, r22
     e54:	bc 01       	movw	r22, r24
     e56:	cd 01       	movw	r24, r26
     e58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5c:	dc 01       	movw	r26, r24
     e5e:	cb 01       	movw	r24, r22
     e60:	98 ab       	std	Y+48, r25	; 0x30
     e62:	8f a7       	std	Y+47, r24	; 0x2f
     e64:	0f c0       	rjmp	.+30     	; 0xe84 <CLCD_voidInit+0xc6>
     e66:	89 e1       	ldi	r24, 0x19	; 25
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9e a7       	std	Y+46, r25	; 0x2e
     e6c:	8d a7       	std	Y+45, r24	; 0x2d
     e6e:	8d a5       	ldd	r24, Y+45	; 0x2d
     e70:	9e a5       	ldd	r25, Y+46	; 0x2e
     e72:	01 97       	sbiw	r24, 0x01	; 1
     e74:	f1 f7       	brne	.-4      	; 0xe72 <CLCD_voidInit+0xb4>
     e76:	9e a7       	std	Y+46, r25	; 0x2e
     e78:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e7a:	8f a5       	ldd	r24, Y+47	; 0x2f
     e7c:	98 a9       	ldd	r25, Y+48	; 0x30
     e7e:	01 97       	sbiw	r24, 0x01	; 1
     e80:	98 ab       	std	Y+48, r25	; 0x30
     e82:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e84:	8f a5       	ldd	r24, Y+47	; 0x2f
     e86:	98 a9       	ldd	r25, Y+48	; 0x30
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	69 f7       	brne	.-38     	; 0xe66 <CLCD_voidInit+0xa8>
     e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <CLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e8e:	69 a9       	ldd	r22, Y+49	; 0x31
     e90:	7a a9       	ldd	r23, Y+50	; 0x32
     e92:	8b a9       	ldd	r24, Y+51	; 0x33
     e94:	9c a9       	ldd	r25, Y+52	; 0x34
     e96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e9a:	dc 01       	movw	r26, r24
     e9c:	cb 01       	movw	r24, r22
     e9e:	98 ab       	std	Y+48, r25	; 0x30
     ea0:	8f a7       	std	Y+47, r24	; 0x2f
     ea2:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea4:	98 a9       	ldd	r25, Y+48	; 0x30
     ea6:	9c a7       	std	Y+44, r25	; 0x2c
     ea8:	8b a7       	std	Y+43, r24	; 0x2b
     eaa:	8b a5       	ldd	r24, Y+43	; 0x2b
     eac:	9c a5       	ldd	r25, Y+44	; 0x2c
     eae:	01 97       	sbiw	r24, 0x01	; 1
     eb0:	f1 f7       	brne	.-4      	; 0xeae <CLCD_voidInit+0xf0>
     eb2:	9c a7       	std	Y+44, r25	; 0x2c
     eb4:	8b a7       	std	Y+43, r24	; 0x2b
_delay_ms(40);
CLCD_voidSendCommand(0b00111000);
     eb6:	88 e3       	ldi	r24, 0x38	; 56
     eb8:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     ebc:	80 e0       	ldi	r24, 0x00	; 0
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	a0 e8       	ldi	r26, 0x80	; 128
     ec2:	bf e3       	ldi	r27, 0x3F	; 63
     ec4:	8f a3       	std	Y+39, r24	; 0x27
     ec6:	98 a7       	std	Y+40, r25	; 0x28
     ec8:	a9 a7       	std	Y+41, r26	; 0x29
     eca:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ecc:	6f a1       	ldd	r22, Y+39	; 0x27
     ece:	78 a5       	ldd	r23, Y+40	; 0x28
     ed0:	89 a5       	ldd	r24, Y+41	; 0x29
     ed2:	9a a5       	ldd	r25, Y+42	; 0x2a
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	4a e7       	ldi	r20, 0x7A	; 122
     eda:	53 e4       	ldi	r21, 0x43	; 67
     edc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee0:	dc 01       	movw	r26, r24
     ee2:	cb 01       	movw	r24, r22
     ee4:	8b a3       	std	Y+35, r24	; 0x23
     ee6:	9c a3       	std	Y+36, r25	; 0x24
     ee8:	ad a3       	std	Y+37, r26	; 0x25
     eea:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     eec:	6b a1       	ldd	r22, Y+35	; 0x23
     eee:	7c a1       	ldd	r23, Y+36	; 0x24
     ef0:	8d a1       	ldd	r24, Y+37	; 0x25
     ef2:	9e a1       	ldd	r25, Y+38	; 0x26
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 e8       	ldi	r20, 0x80	; 128
     efa:	5f e3       	ldi	r21, 0x3F	; 63
     efc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f00:	88 23       	and	r24, r24
     f02:	2c f4       	brge	.+10     	; 0xf0e <CLCD_voidInit+0x150>
		__ticks = 1;
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	90 e0       	ldi	r25, 0x00	; 0
     f08:	9a a3       	std	Y+34, r25	; 0x22
     f0a:	89 a3       	std	Y+33, r24	; 0x21
     f0c:	3f c0       	rjmp	.+126    	; 0xf8c <CLCD_voidInit+0x1ce>
	else if (__tmp > 65535)
     f0e:	6b a1       	ldd	r22, Y+35	; 0x23
     f10:	7c a1       	ldd	r23, Y+36	; 0x24
     f12:	8d a1       	ldd	r24, Y+37	; 0x25
     f14:	9e a1       	ldd	r25, Y+38	; 0x26
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	3f ef       	ldi	r19, 0xFF	; 255
     f1a:	4f e7       	ldi	r20, 0x7F	; 127
     f1c:	57 e4       	ldi	r21, 0x47	; 71
     f1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f22:	18 16       	cp	r1, r24
     f24:	4c f5       	brge	.+82     	; 0xf78 <CLCD_voidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f26:	6f a1       	ldd	r22, Y+39	; 0x27
     f28:	78 a5       	ldd	r23, Y+40	; 0x28
     f2a:	89 a5       	ldd	r24, Y+41	; 0x29
     f2c:	9a a5       	ldd	r25, Y+42	; 0x2a
     f2e:	20 e0       	ldi	r18, 0x00	; 0
     f30:	30 e0       	ldi	r19, 0x00	; 0
     f32:	40 e2       	ldi	r20, 0x20	; 32
     f34:	51 e4       	ldi	r21, 0x41	; 65
     f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3a:	dc 01       	movw	r26, r24
     f3c:	cb 01       	movw	r24, r22
     f3e:	bc 01       	movw	r22, r24
     f40:	cd 01       	movw	r24, r26
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9a a3       	std	Y+34, r25	; 0x22
     f4c:	89 a3       	std	Y+33, r24	; 0x21
     f4e:	0f c0       	rjmp	.+30     	; 0xf6e <CLCD_voidInit+0x1b0>
     f50:	89 e1       	ldi	r24, 0x19	; 25
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	98 a3       	std	Y+32, r25	; 0x20
     f56:	8f 8f       	std	Y+31, r24	; 0x1f
     f58:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f5a:	98 a1       	ldd	r25, Y+32	; 0x20
     f5c:	01 97       	sbiw	r24, 0x01	; 1
     f5e:	f1 f7       	brne	.-4      	; 0xf5c <CLCD_voidInit+0x19e>
     f60:	98 a3       	std	Y+32, r25	; 0x20
     f62:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f64:	89 a1       	ldd	r24, Y+33	; 0x21
     f66:	9a a1       	ldd	r25, Y+34	; 0x22
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	9a a3       	std	Y+34, r25	; 0x22
     f6c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6e:	89 a1       	ldd	r24, Y+33	; 0x21
     f70:	9a a1       	ldd	r25, Y+34	; 0x22
     f72:	00 97       	sbiw	r24, 0x00	; 0
     f74:	69 f7       	brne	.-38     	; 0xf50 <CLCD_voidInit+0x192>
     f76:	14 c0       	rjmp	.+40     	; 0xfa0 <CLCD_voidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f78:	6b a1       	ldd	r22, Y+35	; 0x23
     f7a:	7c a1       	ldd	r23, Y+36	; 0x24
     f7c:	8d a1       	ldd	r24, Y+37	; 0x25
     f7e:	9e a1       	ldd	r25, Y+38	; 0x26
     f80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f84:	dc 01       	movw	r26, r24
     f86:	cb 01       	movw	r24, r22
     f88:	9a a3       	std	Y+34, r25	; 0x22
     f8a:	89 a3       	std	Y+33, r24	; 0x21
     f8c:	89 a1       	ldd	r24, Y+33	; 0x21
     f8e:	9a a1       	ldd	r25, Y+34	; 0x22
     f90:	9e 8f       	std	Y+30, r25	; 0x1e
     f92:	8d 8f       	std	Y+29, r24	; 0x1d
     f94:	8d 8d       	ldd	r24, Y+29	; 0x1d
     f96:	9e 8d       	ldd	r25, Y+30	; 0x1e
     f98:	01 97       	sbiw	r24, 0x01	; 1
     f9a:	f1 f7       	brne	.-4      	; 0xf98 <CLCD_voidInit+0x1da>
     f9c:	9e 8f       	std	Y+30, r25	; 0x1e
     f9e:	8d 8f       	std	Y+29, r24	; 0x1d
_delay_ms(1);
CLCD_voidSendCommand(0b00001100);
     fa0:	8c e0       	ldi	r24, 0x0C	; 12
     fa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
     fa6:	80 e0       	ldi	r24, 0x00	; 0
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a0 e8       	ldi	r26, 0x80	; 128
     fac:	bf e3       	ldi	r27, 0x3F	; 63
     fae:	89 8f       	std	Y+25, r24	; 0x19
     fb0:	9a 8f       	std	Y+26, r25	; 0x1a
     fb2:	ab 8f       	std	Y+27, r26	; 0x1b
     fb4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fb6:	69 8d       	ldd	r22, Y+25	; 0x19
     fb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fba:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fbc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fbe:	20 e0       	ldi	r18, 0x00	; 0
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	4a e7       	ldi	r20, 0x7A	; 122
     fc4:	53 e4       	ldi	r21, 0x43	; 67
     fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fca:	dc 01       	movw	r26, r24
     fcc:	cb 01       	movw	r24, r22
     fce:	8d 8b       	std	Y+21, r24	; 0x15
     fd0:	9e 8b       	std	Y+22, r25	; 0x16
     fd2:	af 8b       	std	Y+23, r26	; 0x17
     fd4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fd6:	6d 89       	ldd	r22, Y+21	; 0x15
     fd8:	7e 89       	ldd	r23, Y+22	; 0x16
     fda:	8f 89       	ldd	r24, Y+23	; 0x17
     fdc:	98 8d       	ldd	r25, Y+24	; 0x18
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	40 e8       	ldi	r20, 0x80	; 128
     fe4:	5f e3       	ldi	r21, 0x3F	; 63
     fe6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fea:	88 23       	and	r24, r24
     fec:	2c f4       	brge	.+10     	; 0xff8 <CLCD_voidInit+0x23a>
		__ticks = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	9c 8b       	std	Y+20, r25	; 0x14
     ff4:	8b 8b       	std	Y+19, r24	; 0x13
     ff6:	3f c0       	rjmp	.+126    	; 0x1076 <CLCD_voidInit+0x2b8>
	else if (__tmp > 65535)
     ff8:	6d 89       	ldd	r22, Y+21	; 0x15
     ffa:	7e 89       	ldd	r23, Y+22	; 0x16
     ffc:	8f 89       	ldd	r24, Y+23	; 0x17
     ffe:	98 8d       	ldd	r25, Y+24	; 0x18
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	3f ef       	ldi	r19, 0xFF	; 255
    1004:	4f e7       	ldi	r20, 0x7F	; 127
    1006:	57 e4       	ldi	r21, 0x47	; 71
    1008:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    100c:	18 16       	cp	r1, r24
    100e:	4c f5       	brge	.+82     	; 0x1062 <CLCD_voidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1010:	69 8d       	ldd	r22, Y+25	; 0x19
    1012:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1014:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1016:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1018:	20 e0       	ldi	r18, 0x00	; 0
    101a:	30 e0       	ldi	r19, 0x00	; 0
    101c:	40 e2       	ldi	r20, 0x20	; 32
    101e:	51 e4       	ldi	r21, 0x41	; 65
    1020:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1024:	dc 01       	movw	r26, r24
    1026:	cb 01       	movw	r24, r22
    1028:	bc 01       	movw	r22, r24
    102a:	cd 01       	movw	r24, r26
    102c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1030:	dc 01       	movw	r26, r24
    1032:	cb 01       	movw	r24, r22
    1034:	9c 8b       	std	Y+20, r25	; 0x14
    1036:	8b 8b       	std	Y+19, r24	; 0x13
    1038:	0f c0       	rjmp	.+30     	; 0x1058 <CLCD_voidInit+0x29a>
    103a:	89 e1       	ldi	r24, 0x19	; 25
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	9a 8b       	std	Y+18, r25	; 0x12
    1040:	89 8b       	std	Y+17, r24	; 0x11
    1042:	89 89       	ldd	r24, Y+17	; 0x11
    1044:	9a 89       	ldd	r25, Y+18	; 0x12
    1046:	01 97       	sbiw	r24, 0x01	; 1
    1048:	f1 f7       	brne	.-4      	; 0x1046 <CLCD_voidInit+0x288>
    104a:	9a 8b       	std	Y+18, r25	; 0x12
    104c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    104e:	8b 89       	ldd	r24, Y+19	; 0x13
    1050:	9c 89       	ldd	r25, Y+20	; 0x14
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9c 8b       	std	Y+20, r25	; 0x14
    1056:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1058:	8b 89       	ldd	r24, Y+19	; 0x13
    105a:	9c 89       	ldd	r25, Y+20	; 0x14
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	69 f7       	brne	.-38     	; 0x103a <CLCD_voidInit+0x27c>
    1060:	14 c0       	rjmp	.+40     	; 0x108a <CLCD_voidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1062:	6d 89       	ldd	r22, Y+21	; 0x15
    1064:	7e 89       	ldd	r23, Y+22	; 0x16
    1066:	8f 89       	ldd	r24, Y+23	; 0x17
    1068:	98 8d       	ldd	r25, Y+24	; 0x18
    106a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	9c 8b       	std	Y+20, r25	; 0x14
    1074:	8b 8b       	std	Y+19, r24	; 0x13
    1076:	8b 89       	ldd	r24, Y+19	; 0x13
    1078:	9c 89       	ldd	r25, Y+20	; 0x14
    107a:	98 8b       	std	Y+16, r25	; 0x10
    107c:	8f 87       	std	Y+15, r24	; 0x0f
    107e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1080:	98 89       	ldd	r25, Y+16	; 0x10
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	f1 f7       	brne	.-4      	; 0x1082 <CLCD_voidInit+0x2c4>
    1086:	98 8b       	std	Y+16, r25	; 0x10
    1088:	8f 87       	std	Y+15, r24	; 0x0f
_delay_ms(1);
CLCD_voidSendCommand(0b00000001);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	90 e0       	ldi	r25, 0x00	; 0
    1094:	a0 e0       	ldi	r26, 0x00	; 0
    1096:	b0 e4       	ldi	r27, 0x40	; 64
    1098:	8b 87       	std	Y+11, r24	; 0x0b
    109a:	9c 87       	std	Y+12, r25	; 0x0c
    109c:	ad 87       	std	Y+13, r26	; 0x0d
    109e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a e7       	ldi	r20, 0x7A	; 122
    10ae:	53 e4       	ldi	r21, 0x43	; 67
    10b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8f 83       	std	Y+7, r24	; 0x07
    10ba:	98 87       	std	Y+8, r25	; 0x08
    10bc:	a9 87       	std	Y+9, r26	; 0x09
    10be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10c0:	6f 81       	ldd	r22, Y+7	; 0x07
    10c2:	78 85       	ldd	r23, Y+8	; 0x08
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	40 e8       	ldi	r20, 0x80	; 128
    10ce:	5f e3       	ldi	r21, 0x3F	; 63
    10d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d4:	88 23       	and	r24, r24
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <CLCD_voidInit+0x324>
		__ticks = 1;
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	9e 83       	std	Y+6, r25	; 0x06
    10de:	8d 83       	std	Y+5, r24	; 0x05
    10e0:	3f c0       	rjmp	.+126    	; 0x1160 <CLCD_voidInit+0x3a2>
	else if (__tmp > 65535)
    10e2:	6f 81       	ldd	r22, Y+7	; 0x07
    10e4:	78 85       	ldd	r23, Y+8	; 0x08
    10e6:	89 85       	ldd	r24, Y+9	; 0x09
    10e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	3f ef       	ldi	r19, 0xFF	; 255
    10ee:	4f e7       	ldi	r20, 0x7F	; 127
    10f0:	57 e4       	ldi	r21, 0x47	; 71
    10f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f6:	18 16       	cp	r1, r24
    10f8:	4c f5       	brge	.+82     	; 0x114c <CLCD_voidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    10fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    1100:	9e 85       	ldd	r25, Y+14	; 0x0e
    1102:	20 e0       	ldi	r18, 0x00	; 0
    1104:	30 e0       	ldi	r19, 0x00	; 0
    1106:	40 e2       	ldi	r20, 0x20	; 32
    1108:	51 e4       	ldi	r21, 0x41	; 65
    110a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	bc 01       	movw	r22, r24
    1114:	cd 01       	movw	r24, r26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9e 83       	std	Y+6, r25	; 0x06
    1120:	8d 83       	std	Y+5, r24	; 0x05
    1122:	0f c0       	rjmp	.+30     	; 0x1142 <CLCD_voidInit+0x384>
    1124:	89 e1       	ldi	r24, 0x19	; 25
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	f1 f7       	brne	.-4      	; 0x1130 <CLCD_voidInit+0x372>
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9e 83       	std	Y+6, r25	; 0x06
    1140:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1142:	8d 81       	ldd	r24, Y+5	; 0x05
    1144:	9e 81       	ldd	r25, Y+6	; 0x06
    1146:	00 97       	sbiw	r24, 0x00	; 0
    1148:	69 f7       	brne	.-38     	; 0x1124 <CLCD_voidInit+0x366>
    114a:	14 c0       	rjmp	.+40     	; 0x1174 <CLCD_voidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    114c:	6f 81       	ldd	r22, Y+7	; 0x07
    114e:	78 85       	ldd	r23, Y+8	; 0x08
    1150:	89 85       	ldd	r24, Y+9	; 0x09
    1152:	9a 85       	ldd	r25, Y+10	; 0x0a
    1154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1158:	dc 01       	movw	r26, r24
    115a:	cb 01       	movw	r24, r22
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	9a 83       	std	Y+2, r25	; 0x02
    1166:	89 83       	std	Y+1, r24	; 0x01
    1168:	89 81       	ldd	r24, Y+1	; 0x01
    116a:	9a 81       	ldd	r25, Y+2	; 0x02
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	f1 f7       	brne	.-4      	; 0x116c <CLCD_voidInit+0x3ae>
    1170:	9a 83       	std	Y+2, r25	; 0x02
    1172:	89 83       	std	Y+1, r24	; 0x01
_delay_ms(2);


}
    1174:	e8 96       	adiw	r28, 0x38	; 56
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	08 95       	ret

00001186 <CLCD_voidSendString>:

void CLCD_voidSendString(char *Copy_pcString){
    1186:	df 93       	push	r29
    1188:	cf 93       	push	r28
    118a:	00 d0       	rcall	.+0      	; 0x118c <CLCD_voidSendString+0x6>
    118c:	0f 92       	push	r0
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	9b 83       	std	Y+3, r25	; 0x03
    1194:	8a 83       	std	Y+2, r24	; 0x02
	for (u8 i=0;Copy_pcString[i]!='\0';i++)
    1196:	19 82       	std	Y+1, r1	; 0x01
    1198:	0e c0       	rjmp	.+28     	; 0x11b6 <CLCD_voidSendString+0x30>
	{
		CLCD_voidSendData(Copy_pcString[i]);
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	fc 01       	movw	r30, r24
    11a6:	e2 0f       	add	r30, r18
    11a8:	f3 1f       	adc	r31, r19
    11aa:	80 81       	ld	r24, Z
    11ac:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>


}

void CLCD_voidSendString(char *Copy_pcString){
	for (u8 i=0;Copy_pcString[i]!='\0';i++)
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	8f 5f       	subi	r24, 0xFF	; 255
    11b4:	89 83       	std	Y+1, r24	; 0x01
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	28 2f       	mov	r18, r24
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	9b 81       	ldd	r25, Y+3	; 0x03
    11c0:	fc 01       	movw	r30, r24
    11c2:	e2 0f       	add	r30, r18
    11c4:	f3 1f       	adc	r31, r19
    11c6:	80 81       	ld	r24, Z
    11c8:	88 23       	and	r24, r24
    11ca:	39 f7       	brne	.-50     	; 0x119a <CLCD_voidSendString+0x14>
	 * while (Copy_pcString[Local_u8Iterator]!='\0')
	{
		CLCD_voidSendData(Copy_pcString[Local_u8Iterator]);
		Local_u8Iterator++;
	}*/
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <CLCD_voidSendNum>:



void CLCD_voidSendNum(u32 num)
{
    11d8:	0f 93       	push	r16
    11da:	1f 93       	push	r17
    11dc:	df 93       	push	r29
    11de:	cf 93       	push	r28
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	60 97       	sbiw	r28, 0x10	; 16
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	f8 94       	cli
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	0f be       	out	0x3f, r0	; 63
    11ee:	cd bf       	out	0x3d, r28	; 61
    11f0:	6d 87       	std	Y+13, r22	; 0x0d
    11f2:	7e 87       	std	Y+14, r23	; 0x0e
    11f4:	8f 87       	std	Y+15, r24	; 0x0f
    11f6:	98 8b       	std	Y+16, r25	; 0x10
	u8 Local_u8arr[10];
	u8 i=0;
    11f8:	1a 82       	std	Y+2, r1	; 0x02
	u8 j=0;
    11fa:	19 82       	std	Y+1, r1	; 0x01
	if (num==0)
    11fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    11fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1200:	af 85       	ldd	r26, Y+15	; 0x0f
    1202:	b8 89       	ldd	r27, Y+16	; 0x10
    1204:	00 97       	sbiw	r24, 0x00	; 0
    1206:	a1 05       	cpc	r26, r1
    1208:	b1 05       	cpc	r27, r1
    120a:	91 f5       	brne	.+100    	; 0x1270 <CLCD_voidSendNum+0x98>
	{
		CLCD_voidSendData('0');    //send the asci of zero
    120c:	80 e3       	ldi	r24, 0x30	; 48
    120e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
    1212:	4d c0       	rjmp	.+154    	; 0x12ae <CLCD_voidSendNum+0xd6>
	}
	else
	{
		while (num)
		{
			Local_u8arr[i]= num%10 +'0';
    1214:	8a 81       	ldd	r24, Y+2	; 0x02
    1216:	08 2f       	mov	r16, r24
    1218:	10 e0       	ldi	r17, 0x00	; 0
    121a:	8d 85       	ldd	r24, Y+13	; 0x0d
    121c:	9e 85       	ldd	r25, Y+14	; 0x0e
    121e:	af 85       	ldd	r26, Y+15	; 0x0f
    1220:	b8 89       	ldd	r27, Y+16	; 0x10
    1222:	2a e0       	ldi	r18, 0x0A	; 10
    1224:	30 e0       	ldi	r19, 0x00	; 0
    1226:	40 e0       	ldi	r20, 0x00	; 0
    1228:	50 e0       	ldi	r21, 0x00	; 0
    122a:	bc 01       	movw	r22, r24
    122c:	cd 01       	movw	r24, r26
    122e:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    1232:	dc 01       	movw	r26, r24
    1234:	cb 01       	movw	r24, r22
    1236:	28 2f       	mov	r18, r24
    1238:	20 5d       	subi	r18, 0xD0	; 208
    123a:	ce 01       	movw	r24, r28
    123c:	03 96       	adiw	r24, 0x03	; 3
    123e:	fc 01       	movw	r30, r24
    1240:	e0 0f       	add	r30, r16
    1242:	f1 1f       	adc	r31, r17
    1244:	20 83       	st	Z, r18
			num/=10;
    1246:	8d 85       	ldd	r24, Y+13	; 0x0d
    1248:	9e 85       	ldd	r25, Y+14	; 0x0e
    124a:	af 85       	ldd	r26, Y+15	; 0x0f
    124c:	b8 89       	ldd	r27, Y+16	; 0x10
    124e:	2a e0       	ldi	r18, 0x0A	; 10
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e0       	ldi	r20, 0x00	; 0
    1254:	50 e0       	ldi	r21, 0x00	; 0
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	0e 94 e1 0e 	call	0x1dc2	; 0x1dc2 <__udivmodsi4>
    125e:	da 01       	movw	r26, r20
    1260:	c9 01       	movw	r24, r18
    1262:	8d 87       	std	Y+13, r24	; 0x0d
    1264:	9e 87       	std	Y+14, r25	; 0x0e
    1266:	af 87       	std	Y+15, r26	; 0x0f
    1268:	b8 8b       	std	Y+16, r27	; 0x10
			i++;
    126a:	8a 81       	ldd	r24, Y+2	; 0x02
    126c:	8f 5f       	subi	r24, 0xFF	; 255
    126e:	8a 83       	std	Y+2, r24	; 0x02
	{
		CLCD_voidSendData('0');    //send the asci of zero
	}
	else
	{
		while (num)
    1270:	8d 85       	ldd	r24, Y+13	; 0x0d
    1272:	9e 85       	ldd	r25, Y+14	; 0x0e
    1274:	af 85       	ldd	r26, Y+15	; 0x0f
    1276:	b8 89       	ldd	r27, Y+16	; 0x10
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	a1 05       	cpc	r26, r1
    127c:	b1 05       	cpc	r27, r1
    127e:	51 f6       	brne	.-108    	; 0x1214 <CLCD_voidSendNum+0x3c>
		{
			Local_u8arr[i]= num%10 +'0';
			num/=10;
			i++;
		}
		for (j=i;j>0;j--)
    1280:	8a 81       	ldd	r24, Y+2	; 0x02
    1282:	89 83       	std	Y+1, r24	; 0x01
    1284:	11 c0       	rjmp	.+34     	; 0x12a8 <CLCD_voidSendNum+0xd0>
		{
			CLCD_voidSendData(Local_u8arr[j-1]);
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	9c 01       	movw	r18, r24
    128e:	21 50       	subi	r18, 0x01	; 1
    1290:	30 40       	sbci	r19, 0x00	; 0
    1292:	ce 01       	movw	r24, r28
    1294:	03 96       	adiw	r24, 0x03	; 3
    1296:	fc 01       	movw	r30, r24
    1298:	e2 0f       	add	r30, r18
    129a:	f3 1f       	adc	r31, r19
    129c:	80 81       	ld	r24, Z
    129e:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
		{
			Local_u8arr[i]= num%10 +'0';
			num/=10;
			i++;
		}
		for (j=i;j>0;j--)
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
    12a4:	81 50       	subi	r24, 0x01	; 1
    12a6:	89 83       	std	Y+1, r24	; 0x01
    12a8:	89 81       	ldd	r24, Y+1	; 0x01
    12aa:	88 23       	and	r24, r24
    12ac:	61 f7       	brne	.-40     	; 0x1286 <CLCD_voidSendNum+0xae>
		{
			CLCD_voidSendData(Local_u8arr[j-1]);

		}
	}
}
    12ae:	60 96       	adiw	r28, 0x10	; 16
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	1f 91       	pop	r17
    12c0:	0f 91       	pop	r16
    12c2:	08 95       	ret

000012c4 <CLCD_voidSetPosition>:


void CLCD_voidSetPosition(u8 Copy_u8X,u8 Copy_u8Y){
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <CLCD_voidSetPosition+0x6>
    12ca:	0f 92       	push	r0
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	8a 83       	std	Y+2, r24	; 0x02
    12d2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8_position=0;
    12d4:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8X==0){
    12d6:	8a 81       	ldd	r24, Y+2	; 0x02
    12d8:	88 23       	and	r24, r24
    12da:	19 f4       	brne	.+6      	; 0x12e2 <CLCD_voidSetPosition+0x1e>
		Local_u8_position= Copy_u8Y;
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	06 c0       	rjmp	.+12     	; 0x12ee <CLCD_voidSetPosition+0x2a>

	}
	else if (Copy_u8X==1){
    12e2:	8a 81       	ldd	r24, Y+2	; 0x02
    12e4:	81 30       	cpi	r24, 0x01	; 1
    12e6:	19 f4       	brne	.+6      	; 0x12ee <CLCD_voidSetPosition+0x2a>
		Local_u8_position= Copy_u8Y+0x40;
    12e8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ea:	80 5c       	subi	r24, 0xC0	; 192
    12ec:	89 83       	std	Y+1, r24	; 0x01
	}
	CLCD_voidSendCommand(Local_u8_position+128);
    12ee:	89 81       	ldd	r24, Y+1	; 0x01
    12f0:	80 58       	subi	r24, 0x80	; 128
    12f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <CLCD_voidDrawSpecialChar>:

void CLCD_voidDrawSpecialChar(u8 *Copy_Pu8Pattern, u8 Copy_u8Loc,u8 Copy_u8x,u8 Copy_u8y)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	27 97       	sbiw	r28, 0x07	; 7
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
    1316:	9c 83       	std	Y+4, r25	; 0x04
    1318:	8b 83       	std	Y+3, r24	; 0x03
    131a:	6d 83       	std	Y+5, r22	; 0x05
    131c:	4e 83       	std	Y+6, r20	; 0x06
    131e:	2f 83       	std	Y+7, r18	; 0x07
	//the special character will be array of 8 components, 5 bits each ( in other words, 8 bits each but the grid can afford only 5 )
	u8 Local_u8Iterator=0;
    1320:	1a 82       	std	Y+2, r1	; 0x02
	//in which grid we will display your special character
	u8 Local_u8Cgram_Add= Copy_u8Loc * 8;
    1322:	8d 81       	ldd	r24, Y+5	; 0x05
    1324:	88 2f       	mov	r24, r24
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	88 0f       	add	r24, r24
    132a:	99 1f       	adc	r25, r25
    132c:	88 0f       	add	r24, r24
    132e:	99 1f       	adc	r25, r25
    1330:	88 0f       	add	r24, r24
    1332:	99 1f       	adc	r25, r25
    1334:	89 83       	std	Y+1, r24	; 0x01
	CLCD_voidSendCommand(Local_u8Cgram_Add+64);  //from data sheet, the sixth bit must be 1, so we add 64 -> (100000)
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	80 5c       	subi	r24, 0xC0	; 192
    133a:	0e 94 a3 05 	call	0xb46	; 0xb46 <CLCD_voidSendCommand>
    133e:	0e c0       	rjmp	.+28     	; 0x135c <CLCD_voidDrawSpecialChar+0x5a>

	for (;Local_u8Iterator<8;Local_u8Iterator++)
	{
		CLCD_voidSendData(Copy_Pu8Pattern[Local_u8Iterator]);
    1340:	8a 81       	ldd	r24, Y+2	; 0x02
    1342:	28 2f       	mov	r18, r24
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	fc 01       	movw	r30, r24
    134c:	e2 0f       	add	r30, r18
    134e:	f3 1f       	adc	r31, r19
    1350:	80 81       	ld	r24, Z
    1352:	0e 94 41 06 	call	0xc82	; 0xc82 <CLCD_voidSendData>
	u8 Local_u8Iterator=0;
	//in which grid we will display your special character
	u8 Local_u8Cgram_Add= Copy_u8Loc * 8;
	CLCD_voidSendCommand(Local_u8Cgram_Add+64);  //from data sheet, the sixth bit must be 1, so we add 64 -> (100000)

	for (;Local_u8Iterator<8;Local_u8Iterator++)
    1356:	8a 81       	ldd	r24, Y+2	; 0x02
    1358:	8f 5f       	subi	r24, 0xFF	; 255
    135a:	8a 83       	std	Y+2, r24	; 0x02
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	88 30       	cpi	r24, 0x08	; 8
    1360:	78 f3       	brcs	.-34     	; 0x1340 <CLCD_voidDrawSpecialChar+0x3e>
	{
		CLCD_voidSendData(Copy_Pu8Pattern[Local_u8Iterator]);
	}
	CLCD_voidSetPosition(Copy_u8x,Copy_u8y);
    1362:	8e 81       	ldd	r24, Y+6	; 0x06
    1364:	6f 81       	ldd	r22, Y+7	; 0x07
    1366:	0e 94 62 09 	call	0x12c4	; 0x12c4 <CLCD_voidSetPosition>

}
    136a:	27 96       	adiw	r28, 0x07	; 7
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	de bf       	out	0x3e, r29	; 62
    1372:	0f be       	out	0x3f, r0	; 63
    1374:	cd bf       	out	0x3d, r28	; 61
    1376:	cf 91       	pop	r28
    1378:	df 91       	pop	r29
    137a:	08 95       	ret

0000137c <DIO_voidSetPortDir>:
#include "DIO_config.h"
#include "DIO_interface.h"



void DIO_voidSetPortDir(u8 Copy_u8Port,u8 Copy_u8Dir){
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	00 d0       	rcall	.+0      	; 0x1382 <DIO_voidSetPortDir+0x6>
    1382:	00 d0       	rcall	.+0      	; 0x1384 <DIO_voidSetPortDir+0x8>
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	89 83       	std	Y+1, r24	; 0x01
    138a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	3c 83       	std	Y+4, r19	; 0x04
    1394:	2b 83       	std	Y+3, r18	; 0x03
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	82 30       	cpi	r24, 0x02	; 2
    139c:	91 05       	cpc	r25, r1
    139e:	d9 f0       	breq	.+54     	; 0x13d6 <DIO_voidSetPortDir+0x5a>
    13a0:	2b 81       	ldd	r18, Y+3	; 0x03
    13a2:	3c 81       	ldd	r19, Y+4	; 0x04
    13a4:	23 30       	cpi	r18, 0x03	; 3
    13a6:	31 05       	cpc	r19, r1
    13a8:	34 f4       	brge	.+12     	; 0x13b6 <DIO_voidSetPortDir+0x3a>
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	81 30       	cpi	r24, 0x01	; 1
    13b0:	91 05       	cpc	r25, r1
    13b2:	61 f0       	breq	.+24     	; 0x13cc <DIO_voidSetPortDir+0x50>
    13b4:	1e c0       	rjmp	.+60     	; 0x13f2 <DIO_voidSetPortDir+0x76>
    13b6:	2b 81       	ldd	r18, Y+3	; 0x03
    13b8:	3c 81       	ldd	r19, Y+4	; 0x04
    13ba:	23 30       	cpi	r18, 0x03	; 3
    13bc:	31 05       	cpc	r19, r1
    13be:	81 f0       	breq	.+32     	; 0x13e0 <DIO_voidSetPortDir+0x64>
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	84 30       	cpi	r24, 0x04	; 4
    13c6:	91 05       	cpc	r25, r1
    13c8:	81 f0       	breq	.+32     	; 0x13ea <DIO_voidSetPortDir+0x6e>
    13ca:	13 c0       	rjmp	.+38     	; 0x13f2 <DIO_voidSetPortDir+0x76>
	case PORTA_REG :DDRA = Copy_u8Dir;break;
    13cc:	ea e3       	ldi	r30, 0x3A	; 58
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	80 83       	st	Z, r24
    13d4:	0e c0       	rjmp	.+28     	; 0x13f2 <DIO_voidSetPortDir+0x76>
	case PORTB_REG :DDRB = Copy_u8Dir;break;
    13d6:	e7 e3       	ldi	r30, 0x37	; 55
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	80 83       	st	Z, r24
    13de:	09 c0       	rjmp	.+18     	; 0x13f2 <DIO_voidSetPortDir+0x76>
	case PORTC_REG :DDRC = Copy_u8Dir;break;
    13e0:	e4 e3       	ldi	r30, 0x34	; 52
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	80 83       	st	Z, r24
    13e8:	04 c0       	rjmp	.+8      	; 0x13f2 <DIO_voidSetPortDir+0x76>
	case PORTD_REG :DDRD = Copy_u8Dir;break;
    13ea:	e1 e3       	ldi	r30, 0x31	; 49
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8a 81       	ldd	r24, Y+2	; 0x02
    13f0:	80 83       	st	Z, r24
	}
}
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	cf 91       	pop	r28
    13fc:	df 91       	pop	r29
    13fe:	08 95       	ret

00001400 <DIO_voidSetPinDir>:

void DIO_voidSetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Dir){
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	27 97       	sbiw	r28, 0x07	; 7
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	6a 83       	std	Y+2, r22	; 0x02
    1418:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=7){
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	88 30       	cpi	r24, 0x08	; 8
    141e:	08 f0       	brcs	.+2      	; 0x1422 <DIO_voidSetPinDir+0x22>
    1420:	ec c0       	rjmp	.+472    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
		if(Copy_u8Dir==PIN_DIR_OUT){
    1422:	8b 81       	ldd	r24, Y+3	; 0x03
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	09 f0       	breq	.+2      	; 0x142a <DIO_voidSetPinDir+0x2a>
    1428:	70 c0       	rjmp	.+224    	; 0x150a <DIO_voidSetPinDir+0x10a>
			switch(Copy_u8Port){
    142a:	89 81       	ldd	r24, Y+1	; 0x01
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	3f 83       	std	Y+7, r19	; 0x07
    1432:	2e 83       	std	Y+6, r18	; 0x06
    1434:	8e 81       	ldd	r24, Y+6	; 0x06
    1436:	9f 81       	ldd	r25, Y+7	; 0x07
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	91 05       	cpc	r25, r1
    143c:	51 f1       	breq	.+84     	; 0x1492 <DIO_voidSetPinDir+0x92>
    143e:	2e 81       	ldd	r18, Y+6	; 0x06
    1440:	3f 81       	ldd	r19, Y+7	; 0x07
    1442:	23 30       	cpi	r18, 0x03	; 3
    1444:	31 05       	cpc	r19, r1
    1446:	34 f4       	brge	.+12     	; 0x1454 <DIO_voidSetPinDir+0x54>
    1448:	8e 81       	ldd	r24, Y+6	; 0x06
    144a:	9f 81       	ldd	r25, Y+7	; 0x07
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	91 05       	cpc	r25, r1
    1450:	61 f0       	breq	.+24     	; 0x146a <DIO_voidSetPinDir+0x6a>
    1452:	d3 c0       	rjmp	.+422    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
    1454:	2e 81       	ldd	r18, Y+6	; 0x06
    1456:	3f 81       	ldd	r19, Y+7	; 0x07
    1458:	23 30       	cpi	r18, 0x03	; 3
    145a:	31 05       	cpc	r19, r1
    145c:	71 f1       	breq	.+92     	; 0x14ba <DIO_voidSetPinDir+0xba>
    145e:	8e 81       	ldd	r24, Y+6	; 0x06
    1460:	9f 81       	ldd	r25, Y+7	; 0x07
    1462:	84 30       	cpi	r24, 0x04	; 4
    1464:	91 05       	cpc	r25, r1
    1466:	e9 f1       	breq	.+122    	; 0x14e2 <DIO_voidSetPinDir+0xe2>
    1468:	c8 c0       	rjmp	.+400    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			case PORTA_REG :SET_BIT(DDRA,Copy_u8Pin);break;
    146a:	aa e3       	ldi	r26, 0x3A	; 58
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	ea e3       	ldi	r30, 0x3A	; 58
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	48 2f       	mov	r20, r24
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	28 2f       	mov	r18, r24
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	02 2e       	mov	r0, r18
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <DIO_voidSetPinDir+0x88>
    1484:	88 0f       	add	r24, r24
    1486:	99 1f       	adc	r25, r25
    1488:	0a 94       	dec	r0
    148a:	e2 f7       	brpl	.-8      	; 0x1484 <DIO_voidSetPinDir+0x84>
    148c:	84 2b       	or	r24, r20
    148e:	8c 93       	st	X, r24
    1490:	b4 c0       	rjmp	.+360    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG :SET_BIT(DDRB,Copy_u8Pin);break;
    1492:	a7 e3       	ldi	r26, 0x37	; 55
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e7 e3       	ldi	r30, 0x37	; 55
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	48 2f       	mov	r20, r24
    149e:	8a 81       	ldd	r24, Y+2	; 0x02
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	81 e0       	ldi	r24, 0x01	; 1
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	02 2e       	mov	r0, r18
    14aa:	02 c0       	rjmp	.+4      	; 0x14b0 <DIO_voidSetPinDir+0xb0>
    14ac:	88 0f       	add	r24, r24
    14ae:	99 1f       	adc	r25, r25
    14b0:	0a 94       	dec	r0
    14b2:	e2 f7       	brpl	.-8      	; 0x14ac <DIO_voidSetPinDir+0xac>
    14b4:	84 2b       	or	r24, r20
    14b6:	8c 93       	st	X, r24
    14b8:	a0 c0       	rjmp	.+320    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG :SET_BIT(DDRC,Copy_u8Pin);break;
    14ba:	a4 e3       	ldi	r26, 0x34	; 52
    14bc:	b0 e0       	ldi	r27, 0x00	; 0
    14be:	e4 e3       	ldi	r30, 0x34	; 52
    14c0:	f0 e0       	ldi	r31, 0x00	; 0
    14c2:	80 81       	ld	r24, Z
    14c4:	48 2f       	mov	r20, r24
    14c6:	8a 81       	ldd	r24, Y+2	; 0x02
    14c8:	28 2f       	mov	r18, r24
    14ca:	30 e0       	ldi	r19, 0x00	; 0
    14cc:	81 e0       	ldi	r24, 0x01	; 1
    14ce:	90 e0       	ldi	r25, 0x00	; 0
    14d0:	02 2e       	mov	r0, r18
    14d2:	02 c0       	rjmp	.+4      	; 0x14d8 <DIO_voidSetPinDir+0xd8>
    14d4:	88 0f       	add	r24, r24
    14d6:	99 1f       	adc	r25, r25
    14d8:	0a 94       	dec	r0
    14da:	e2 f7       	brpl	.-8      	; 0x14d4 <DIO_voidSetPinDir+0xd4>
    14dc:	84 2b       	or	r24, r20
    14de:	8c 93       	st	X, r24
    14e0:	8c c0       	rjmp	.+280    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG :SET_BIT(DDRD,Copy_u8Pin);break;
    14e2:	a1 e3       	ldi	r26, 0x31	; 49
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	e1 e3       	ldi	r30, 0x31	; 49
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	48 2f       	mov	r20, r24
    14ee:	8a 81       	ldd	r24, Y+2	; 0x02
    14f0:	28 2f       	mov	r18, r24
    14f2:	30 e0       	ldi	r19, 0x00	; 0
    14f4:	81 e0       	ldi	r24, 0x01	; 1
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	02 2e       	mov	r0, r18
    14fa:	02 c0       	rjmp	.+4      	; 0x1500 <DIO_voidSetPinDir+0x100>
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	0a 94       	dec	r0
    1502:	e2 f7       	brpl	.-8      	; 0x14fc <DIO_voidSetPinDir+0xfc>
    1504:	84 2b       	or	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	78 c0       	rjmp	.+240    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			}
		}
		else if(Copy_u8Dir==PIN_DIR_IN){
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	88 23       	and	r24, r24
    150e:	09 f0       	breq	.+2      	; 0x1512 <DIO_voidSetPinDir+0x112>
    1510:	74 c0       	rjmp	.+232    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			switch(Copy_u8Port){
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3d 83       	std	Y+5, r19	; 0x05
    151a:	2c 83       	std	Y+4, r18	; 0x04
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	91 05       	cpc	r25, r1
    1524:	61 f1       	breq	.+88     	; 0x157e <DIO_voidSetPinDir+0x17e>
    1526:	2c 81       	ldd	r18, Y+4	; 0x04
    1528:	3d 81       	ldd	r19, Y+5	; 0x05
    152a:	23 30       	cpi	r18, 0x03	; 3
    152c:	31 05       	cpc	r19, r1
    152e:	34 f4       	brge	.+12     	; 0x153c <DIO_voidSetPinDir+0x13c>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	69 f0       	breq	.+26     	; 0x1554 <DIO_voidSetPinDir+0x154>
    153a:	5f c0       	rjmp	.+190    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	23 30       	cpi	r18, 0x03	; 3
    1542:	31 05       	cpc	r19, r1
    1544:	89 f1       	breq	.+98     	; 0x15a8 <DIO_voidSetPinDir+0x1a8>
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	91 05       	cpc	r25, r1
    154e:	09 f4       	brne	.+2      	; 0x1552 <DIO_voidSetPinDir+0x152>
    1550:	40 c0       	rjmp	.+128    	; 0x15d2 <DIO_voidSetPinDir+0x1d2>
    1552:	53 c0       	rjmp	.+166    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			case PORTA_REG :CLR_BIT(DDRA,Copy_u8Pin);break;
    1554:	aa e3       	ldi	r26, 0x3A	; 58
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	ea e3       	ldi	r30, 0x3A	; 58
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 2e       	mov	r0, r18
    156c:	02 c0       	rjmp	.+4      	; 0x1572 <DIO_voidSetPinDir+0x172>
    156e:	88 0f       	add	r24, r24
    1570:	99 1f       	adc	r25, r25
    1572:	0a 94       	dec	r0
    1574:	e2 f7       	brpl	.-8      	; 0x156e <DIO_voidSetPinDir+0x16e>
    1576:	80 95       	com	r24
    1578:	84 23       	and	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	3e c0       	rjmp	.+124    	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG :CLR_BIT(DDRB,Copy_u8Pin);break;
    157e:	a7 e3       	ldi	r26, 0x37	; 55
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e7 e3       	ldi	r30, 0x37	; 55
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <DIO_voidSetPinDir+0x19c>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <DIO_voidSetPinDir+0x198>
    15a0:	80 95       	com	r24
    15a2:	84 23       	and	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	29 c0       	rjmp	.+82     	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG :CLR_BIT(DDRC,Copy_u8Pin);break;
    15a8:	a4 e3       	ldi	r26, 0x34	; 52
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e4 e3       	ldi	r30, 0x34	; 52
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_voidSetPinDir+0x1c6>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_voidSetPinDir+0x1c2>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	14 c0       	rjmp	.+40     	; 0x15fa <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG :CLR_BIT(DDRD,Copy_u8Pin);break;
    15d2:	a1 e3       	ldi	r26, 0x31	; 49
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	e1 e3       	ldi	r30, 0x31	; 49
    15d8:	f0 e0       	ldi	r31, 0x00	; 0
    15da:	80 81       	ld	r24, Z
    15dc:	48 2f       	mov	r20, r24
    15de:	8a 81       	ldd	r24, Y+2	; 0x02
    15e0:	28 2f       	mov	r18, r24
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	02 2e       	mov	r0, r18
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <DIO_voidSetPinDir+0x1f0>
    15ec:	88 0f       	add	r24, r24
    15ee:	99 1f       	adc	r25, r25
    15f0:	0a 94       	dec	r0
    15f2:	e2 f7       	brpl	.-8      	; 0x15ec <DIO_voidSetPinDir+0x1ec>
    15f4:	80 95       	com	r24
    15f6:	84 23       	and	r24, r20
    15f8:	8c 93       	st	X, r24
			}
		}
	}
}
    15fa:	27 96       	adiw	r28, 0x07	; 7
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	de bf       	out	0x3e, r29	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	cd bf       	out	0x3d, r28	; 61
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <DIO_voidSetPortVal>:

void DIO_voidSetPortVal(u8 Copy_u8Port,u8 Copy_u8Val){
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <DIO_voidSetPortVal+0x6>
    1612:	00 d0       	rcall	.+0      	; 0x1614 <DIO_voidSetPortVal+0x8>
    1614:	cd b7       	in	r28, 0x3d	; 61
    1616:	de b7       	in	r29, 0x3e	; 62
    1618:	89 83       	std	Y+1, r24	; 0x01
    161a:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8Port){
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	28 2f       	mov	r18, r24
    1620:	30 e0       	ldi	r19, 0x00	; 0
    1622:	3c 83       	std	Y+4, r19	; 0x04
    1624:	2b 83       	std	Y+3, r18	; 0x03
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	9c 81       	ldd	r25, Y+4	; 0x04
    162a:	82 30       	cpi	r24, 0x02	; 2
    162c:	91 05       	cpc	r25, r1
    162e:	d9 f0       	breq	.+54     	; 0x1666 <DIO_voidSetPortVal+0x5a>
    1630:	2b 81       	ldd	r18, Y+3	; 0x03
    1632:	3c 81       	ldd	r19, Y+4	; 0x04
    1634:	23 30       	cpi	r18, 0x03	; 3
    1636:	31 05       	cpc	r19, r1
    1638:	34 f4       	brge	.+12     	; 0x1646 <DIO_voidSetPortVal+0x3a>
    163a:	8b 81       	ldd	r24, Y+3	; 0x03
    163c:	9c 81       	ldd	r25, Y+4	; 0x04
    163e:	81 30       	cpi	r24, 0x01	; 1
    1640:	91 05       	cpc	r25, r1
    1642:	61 f0       	breq	.+24     	; 0x165c <DIO_voidSetPortVal+0x50>
    1644:	1e c0       	rjmp	.+60     	; 0x1682 <DIO_voidSetPortVal+0x76>
    1646:	2b 81       	ldd	r18, Y+3	; 0x03
    1648:	3c 81       	ldd	r19, Y+4	; 0x04
    164a:	23 30       	cpi	r18, 0x03	; 3
    164c:	31 05       	cpc	r19, r1
    164e:	81 f0       	breq	.+32     	; 0x1670 <DIO_voidSetPortVal+0x64>
    1650:	8b 81       	ldd	r24, Y+3	; 0x03
    1652:	9c 81       	ldd	r25, Y+4	; 0x04
    1654:	84 30       	cpi	r24, 0x04	; 4
    1656:	91 05       	cpc	r25, r1
    1658:	81 f0       	breq	.+32     	; 0x167a <DIO_voidSetPortVal+0x6e>
    165a:	13 c0       	rjmp	.+38     	; 0x1682 <DIO_voidSetPortVal+0x76>
	case PORTA_REG :PORTA = Copy_u8Val;break;
    165c:	eb e3       	ldi	r30, 0x3B	; 59
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	80 83       	st	Z, r24
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <DIO_voidSetPortVal+0x76>
	case PORTB_REG :PORTB = Copy_u8Val;break;
    1666:	e8 e3       	ldi	r30, 0x38	; 56
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	8a 81       	ldd	r24, Y+2	; 0x02
    166c:	80 83       	st	Z, r24
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <DIO_voidSetPortVal+0x76>
	case PORTC_REG :PORTC = Copy_u8Val;break;
    1670:	e5 e3       	ldi	r30, 0x35	; 53
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	8a 81       	ldd	r24, Y+2	; 0x02
    1676:	80 83       	st	Z, r24
    1678:	04 c0       	rjmp	.+8      	; 0x1682 <DIO_voidSetPortVal+0x76>
	case PORTD_REG :PORTD = Copy_u8Val;break;
    167a:	e2 e3       	ldi	r30, 0x32	; 50
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	80 83       	st	Z, r24
	}
}
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	08 95       	ret

00001690 <DIO_voidSetPinVal>:

void DIO_voidSetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Val){
    1690:	df 93       	push	r29
    1692:	cf 93       	push	r28
    1694:	cd b7       	in	r28, 0x3d	; 61
    1696:	de b7       	in	r29, 0x3e	; 62
    1698:	27 97       	sbiw	r28, 0x07	; 7
    169a:	0f b6       	in	r0, 0x3f	; 63
    169c:	f8 94       	cli
    169e:	de bf       	out	0x3e, r29	; 62
    16a0:	0f be       	out	0x3f, r0	; 63
    16a2:	cd bf       	out	0x3d, r28	; 61
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	6a 83       	std	Y+2, r22	; 0x02
    16a8:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8Pin<=7){
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	88 30       	cpi	r24, 0x08	; 8
    16ae:	08 f0       	brcs	.+2      	; 0x16b2 <DIO_voidSetPinVal+0x22>
    16b0:	ec c0       	rjmp	.+472    	; 0x188a <DIO_voidSetPinVal+0x1fa>
		if(Copy_u8Val==PIN_VAL_HIGH){
    16b2:	8b 81       	ldd	r24, Y+3	; 0x03
    16b4:	81 30       	cpi	r24, 0x01	; 1
    16b6:	09 f0       	breq	.+2      	; 0x16ba <DIO_voidSetPinVal+0x2a>
    16b8:	70 c0       	rjmp	.+224    	; 0x179a <DIO_voidSetPinVal+0x10a>
			switch(Copy_u8Port){
    16ba:	89 81       	ldd	r24, Y+1	; 0x01
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	3f 83       	std	Y+7, r19	; 0x07
    16c2:	2e 83       	std	Y+6, r18	; 0x06
    16c4:	8e 81       	ldd	r24, Y+6	; 0x06
    16c6:	9f 81       	ldd	r25, Y+7	; 0x07
    16c8:	82 30       	cpi	r24, 0x02	; 2
    16ca:	91 05       	cpc	r25, r1
    16cc:	51 f1       	breq	.+84     	; 0x1722 <DIO_voidSetPinVal+0x92>
    16ce:	2e 81       	ldd	r18, Y+6	; 0x06
    16d0:	3f 81       	ldd	r19, Y+7	; 0x07
    16d2:	23 30       	cpi	r18, 0x03	; 3
    16d4:	31 05       	cpc	r19, r1
    16d6:	34 f4       	brge	.+12     	; 0x16e4 <DIO_voidSetPinVal+0x54>
    16d8:	8e 81       	ldd	r24, Y+6	; 0x06
    16da:	9f 81       	ldd	r25, Y+7	; 0x07
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	91 05       	cpc	r25, r1
    16e0:	61 f0       	breq	.+24     	; 0x16fa <DIO_voidSetPinVal+0x6a>
    16e2:	d3 c0       	rjmp	.+422    	; 0x188a <DIO_voidSetPinVal+0x1fa>
    16e4:	2e 81       	ldd	r18, Y+6	; 0x06
    16e6:	3f 81       	ldd	r19, Y+7	; 0x07
    16e8:	23 30       	cpi	r18, 0x03	; 3
    16ea:	31 05       	cpc	r19, r1
    16ec:	71 f1       	breq	.+92     	; 0x174a <DIO_voidSetPinVal+0xba>
    16ee:	8e 81       	ldd	r24, Y+6	; 0x06
    16f0:	9f 81       	ldd	r25, Y+7	; 0x07
    16f2:	84 30       	cpi	r24, 0x04	; 4
    16f4:	91 05       	cpc	r25, r1
    16f6:	e9 f1       	breq	.+122    	; 0x1772 <DIO_voidSetPinVal+0xe2>
    16f8:	c8 c0       	rjmp	.+400    	; 0x188a <DIO_voidSetPinVal+0x1fa>
			case PORTA_REG :SET_BIT(PORTA,Copy_u8Pin);break;
    16fa:	ab e3       	ldi	r26, 0x3B	; 59
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	eb e3       	ldi	r30, 0x3B	; 59
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	48 2f       	mov	r20, r24
    1706:	8a 81       	ldd	r24, Y+2	; 0x02
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	02 2e       	mov	r0, r18
    1712:	02 c0       	rjmp	.+4      	; 0x1718 <DIO_voidSetPinVal+0x88>
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	0a 94       	dec	r0
    171a:	e2 f7       	brpl	.-8      	; 0x1714 <DIO_voidSetPinVal+0x84>
    171c:	84 2b       	or	r24, r20
    171e:	8c 93       	st	X, r24
    1720:	b4 c0       	rjmp	.+360    	; 0x188a <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG :SET_BIT(PORTB,Copy_u8Pin);break;
    1722:	a8 e3       	ldi	r26, 0x38	; 56
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e8 e3       	ldi	r30, 0x38	; 56
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <DIO_voidSetPinVal+0xb0>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <DIO_voidSetPinVal+0xac>
    1744:	84 2b       	or	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	a0 c0       	rjmp	.+320    	; 0x188a <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG :SET_BIT(PORTC,Copy_u8Pin);break;
    174a:	a5 e3       	ldi	r26, 0x35	; 53
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e5 e3       	ldi	r30, 0x35	; 53
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <DIO_voidSetPinVal+0xd8>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <DIO_voidSetPinVal+0xd4>
    176c:	84 2b       	or	r24, r20
    176e:	8c 93       	st	X, r24
    1770:	8c c0       	rjmp	.+280    	; 0x188a <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG :SET_BIT(PORTD,Copy_u8Pin);break;
    1772:	a2 e3       	ldi	r26, 0x32	; 50
    1774:	b0 e0       	ldi	r27, 0x00	; 0
    1776:	e2 e3       	ldi	r30, 0x32	; 50
    1778:	f0 e0       	ldi	r31, 0x00	; 0
    177a:	80 81       	ld	r24, Z
    177c:	48 2f       	mov	r20, r24
    177e:	8a 81       	ldd	r24, Y+2	; 0x02
    1780:	28 2f       	mov	r18, r24
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	02 2e       	mov	r0, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_voidSetPinVal+0x100>
    178c:	88 0f       	add	r24, r24
    178e:	99 1f       	adc	r25, r25
    1790:	0a 94       	dec	r0
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_voidSetPinVal+0xfc>
    1794:	84 2b       	or	r24, r20
    1796:	8c 93       	st	X, r24
    1798:	78 c0       	rjmp	.+240    	; 0x188a <DIO_voidSetPinVal+0x1fa>
			}
		}
		else if(Copy_u8Val==PIN_VAL_LOW){
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	88 23       	and	r24, r24
    179e:	09 f0       	breq	.+2      	; 0x17a2 <DIO_voidSetPinVal+0x112>
    17a0:	74 c0       	rjmp	.+232    	; 0x188a <DIO_voidSetPinVal+0x1fa>
			switch(Copy_u8Port){
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	3d 83       	std	Y+5, r19	; 0x05
    17aa:	2c 83       	std	Y+4, r18	; 0x04
    17ac:	8c 81       	ldd	r24, Y+4	; 0x04
    17ae:	9d 81       	ldd	r25, Y+5	; 0x05
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	91 05       	cpc	r25, r1
    17b4:	61 f1       	breq	.+88     	; 0x180e <DIO_voidSetPinVal+0x17e>
    17b6:	2c 81       	ldd	r18, Y+4	; 0x04
    17b8:	3d 81       	ldd	r19, Y+5	; 0x05
    17ba:	23 30       	cpi	r18, 0x03	; 3
    17bc:	31 05       	cpc	r19, r1
    17be:	34 f4       	brge	.+12     	; 0x17cc <DIO_voidSetPinVal+0x13c>
    17c0:	8c 81       	ldd	r24, Y+4	; 0x04
    17c2:	9d 81       	ldd	r25, Y+5	; 0x05
    17c4:	81 30       	cpi	r24, 0x01	; 1
    17c6:	91 05       	cpc	r25, r1
    17c8:	69 f0       	breq	.+26     	; 0x17e4 <DIO_voidSetPinVal+0x154>
    17ca:	5f c0       	rjmp	.+190    	; 0x188a <DIO_voidSetPinVal+0x1fa>
    17cc:	2c 81       	ldd	r18, Y+4	; 0x04
    17ce:	3d 81       	ldd	r19, Y+5	; 0x05
    17d0:	23 30       	cpi	r18, 0x03	; 3
    17d2:	31 05       	cpc	r19, r1
    17d4:	89 f1       	breq	.+98     	; 0x1838 <DIO_voidSetPinVal+0x1a8>
    17d6:	8c 81       	ldd	r24, Y+4	; 0x04
    17d8:	9d 81       	ldd	r25, Y+5	; 0x05
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	91 05       	cpc	r25, r1
    17de:	09 f4       	brne	.+2      	; 0x17e2 <DIO_voidSetPinVal+0x152>
    17e0:	40 c0       	rjmp	.+128    	; 0x1862 <DIO_voidSetPinVal+0x1d2>
    17e2:	53 c0       	rjmp	.+166    	; 0x188a <DIO_voidSetPinVal+0x1fa>
			case PORTA_REG :CLR_BIT(PORTA,Copy_u8Pin);break;
    17e4:	ab e3       	ldi	r26, 0x3B	; 59
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	eb e3       	ldi	r30, 0x3B	; 59
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_voidSetPinVal+0x172>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_voidSetPinVal+0x16e>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	3e c0       	rjmp	.+124    	; 0x188a <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG :CLR_BIT(PORTB,Copy_u8Pin);break;
    180e:	a8 e3       	ldi	r26, 0x38	; 56
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e8 e3       	ldi	r30, 0x38	; 56
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8a 81       	ldd	r24, Y+2	; 0x02
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_voidSetPinVal+0x19c>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_voidSetPinVal+0x198>
    1830:	80 95       	com	r24
    1832:	84 23       	and	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	29 c0       	rjmp	.+82     	; 0x188a <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG :CLR_BIT(PORTC,Copy_u8Pin);break;
    1838:	a5 e3       	ldi	r26, 0x35	; 53
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e5 e3       	ldi	r30, 0x35	; 53
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <DIO_voidSetPinVal+0x1c6>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <DIO_voidSetPinVal+0x1c2>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	14 c0       	rjmp	.+40     	; 0x188a <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG :CLR_BIT(PORTD,Copy_u8Pin);break;
    1862:	a2 e3       	ldi	r26, 0x32	; 50
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	e2 e3       	ldi	r30, 0x32	; 50
    1868:	f0 e0       	ldi	r31, 0x00	; 0
    186a:	80 81       	ld	r24, Z
    186c:	48 2f       	mov	r20, r24
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	28 2f       	mov	r18, r24
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	81 e0       	ldi	r24, 0x01	; 1
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	02 2e       	mov	r0, r18
    187a:	02 c0       	rjmp	.+4      	; 0x1880 <DIO_voidSetPinVal+0x1f0>
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	0a 94       	dec	r0
    1882:	e2 f7       	brpl	.-8      	; 0x187c <DIO_voidSetPinVal+0x1ec>
    1884:	80 95       	com	r24
    1886:	84 23       	and	r24, r20
    1888:	8c 93       	st	X, r24
			}
		}
	}
}
    188a:	27 96       	adiw	r28, 0x07	; 7
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <DIO_u8GetPinVal>:

u8 DIO_u8GetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin){
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <DIO_u8GetPinVal+0x6>
    18a2:	00 d0       	rcall	.+0      	; 0x18a4 <DIO_u8GetPinVal+0x8>
    18a4:	0f 92       	push	r0
    18a6:	cd b7       	in	r28, 0x3d	; 61
    18a8:	de b7       	in	r29, 0x3e	; 62
    18aa:	8a 83       	std	Y+2, r24	; 0x02
    18ac:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Reading=0;
    18ae:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=7){
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	88 30       	cpi	r24, 0x08	; 8
    18b4:	08 f0       	brcs	.+2      	; 0x18b8 <DIO_u8GetPinVal+0x1c>
    18b6:	67 c0       	rjmp	.+206    	; 0x1986 <DIO_u8GetPinVal+0xea>
		switch(Copy_u8Port){
    18b8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ba:	28 2f       	mov	r18, r24
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	3d 83       	std	Y+5, r19	; 0x05
    18c0:	2c 83       	std	Y+4, r18	; 0x04
    18c2:	4c 81       	ldd	r20, Y+4	; 0x04
    18c4:	5d 81       	ldd	r21, Y+5	; 0x05
    18c6:	42 30       	cpi	r20, 0x02	; 2
    18c8:	51 05       	cpc	r21, r1
    18ca:	41 f1       	breq	.+80     	; 0x191c <DIO_u8GetPinVal+0x80>
    18cc:	8c 81       	ldd	r24, Y+4	; 0x04
    18ce:	9d 81       	ldd	r25, Y+5	; 0x05
    18d0:	83 30       	cpi	r24, 0x03	; 3
    18d2:	91 05       	cpc	r25, r1
    18d4:	34 f4       	brge	.+12     	; 0x18e2 <DIO_u8GetPinVal+0x46>
    18d6:	2c 81       	ldd	r18, Y+4	; 0x04
    18d8:	3d 81       	ldd	r19, Y+5	; 0x05
    18da:	21 30       	cpi	r18, 0x01	; 1
    18dc:	31 05       	cpc	r19, r1
    18de:	61 f0       	breq	.+24     	; 0x18f8 <DIO_u8GetPinVal+0x5c>
    18e0:	52 c0       	rjmp	.+164    	; 0x1986 <DIO_u8GetPinVal+0xea>
    18e2:	4c 81       	ldd	r20, Y+4	; 0x04
    18e4:	5d 81       	ldd	r21, Y+5	; 0x05
    18e6:	43 30       	cpi	r20, 0x03	; 3
    18e8:	51 05       	cpc	r21, r1
    18ea:	51 f1       	breq	.+84     	; 0x1940 <DIO_u8GetPinVal+0xa4>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	84 30       	cpi	r24, 0x04	; 4
    18f2:	91 05       	cpc	r25, r1
    18f4:	b9 f1       	breq	.+110    	; 0x1964 <DIO_u8GetPinVal+0xc8>
    18f6:	47 c0       	rjmp	.+142    	; 0x1986 <DIO_u8GetPinVal+0xea>
		case PORTA_REG :Local_u8Reading = GET_BIT(PINA,Copy_u8Pin);break;
    18f8:	e9 e3       	ldi	r30, 0x39	; 57
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	80 81       	ld	r24, Z
    18fe:	28 2f       	mov	r18, r24
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	88 2f       	mov	r24, r24
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	a9 01       	movw	r20, r18
    190a:	02 c0       	rjmp	.+4      	; 0x1910 <DIO_u8GetPinVal+0x74>
    190c:	55 95       	asr	r21
    190e:	47 95       	ror	r20
    1910:	8a 95       	dec	r24
    1912:	e2 f7       	brpl	.-8      	; 0x190c <DIO_u8GetPinVal+0x70>
    1914:	ca 01       	movw	r24, r20
    1916:	81 70       	andi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	35 c0       	rjmp	.+106    	; 0x1986 <DIO_u8GetPinVal+0xea>
		case PORTB_REG :Local_u8Reading = GET_BIT(PINB,Copy_u8Pin);break;
    191c:	e6 e3       	ldi	r30, 0x36	; 54
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	88 2f       	mov	r24, r24
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	a9 01       	movw	r20, r18
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <DIO_u8GetPinVal+0x98>
    1930:	55 95       	asr	r21
    1932:	47 95       	ror	r20
    1934:	8a 95       	dec	r24
    1936:	e2 f7       	brpl	.-8      	; 0x1930 <DIO_u8GetPinVal+0x94>
    1938:	ca 01       	movw	r24, r20
    193a:	81 70       	andi	r24, 0x01	; 1
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	23 c0       	rjmp	.+70     	; 0x1986 <DIO_u8GetPinVal+0xea>
		case PORTC_REG :Local_u8Reading = GET_BIT(PINC,Copy_u8Pin);break;
    1940:	e3 e3       	ldi	r30, 0x33	; 51
    1942:	f0 e0       	ldi	r31, 0x00	; 0
    1944:	80 81       	ld	r24, Z
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	8b 81       	ldd	r24, Y+3	; 0x03
    194c:	88 2f       	mov	r24, r24
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	a9 01       	movw	r20, r18
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <DIO_u8GetPinVal+0xbc>
    1954:	55 95       	asr	r21
    1956:	47 95       	ror	r20
    1958:	8a 95       	dec	r24
    195a:	e2 f7       	brpl	.-8      	; 0x1954 <DIO_u8GetPinVal+0xb8>
    195c:	ca 01       	movw	r24, r20
    195e:	81 70       	andi	r24, 0x01	; 1
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	11 c0       	rjmp	.+34     	; 0x1986 <DIO_u8GetPinVal+0xea>
		case PORTD_REG :Local_u8Reading = GET_BIT(PIND,Copy_u8Pin);break;
    1964:	e0 e3       	ldi	r30, 0x30	; 48
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	80 81       	ld	r24, Z
    196a:	28 2f       	mov	r18, r24
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	8b 81       	ldd	r24, Y+3	; 0x03
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	a9 01       	movw	r20, r18
    1976:	02 c0       	rjmp	.+4      	; 0x197c <DIO_u8GetPinVal+0xe0>
    1978:	55 95       	asr	r21
    197a:	47 95       	ror	r20
    197c:	8a 95       	dec	r24
    197e:	e2 f7       	brpl	.-8      	; 0x1978 <DIO_u8GetPinVal+0xdc>
    1980:	ca 01       	movw	r24, r20
    1982:	81 70       	andi	r24, 0x01	; 1
    1984:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8Reading;
    1986:	89 81       	ldd	r24, Y+1	; 0x01
}
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <GIE_voidEnable>:
#include "STD_TYPES.h"
#include "BIT_MATH.h"
#include "GIE_private.h"
#include "GIE_interface.h"

void GIE_voidEnable(void){
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    19a0:	af e5       	ldi	r26, 0x5F	; 95
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	ef e5       	ldi	r30, 0x5F	; 95
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	80 68       	ori	r24, 0x80	; 128
    19ac:	8c 93       	st	X, r24
}
    19ae:	cf 91       	pop	r28
    19b0:	df 91       	pop	r29
    19b2:	08 95       	ret

000019b4 <GIE_voidDisable>:


void GIE_voidDisable(void){
    19b4:	df 93       	push	r29
    19b6:	cf 93       	push	r28
    19b8:	cd b7       	in	r28, 0x3d	; 61
    19ba:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    19bc:	af e5       	ldi	r26, 0x5F	; 95
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	ef e5       	ldi	r30, 0x5F	; 95
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	8f 77       	andi	r24, 0x7F	; 127
    19c8:	8c 93       	st	X, r24
}
    19ca:	cf 91       	pop	r28
    19cc:	df 91       	pop	r29
    19ce:	08 95       	ret

000019d0 <HWICU_voidInit>:
#include "TIMER1_private.h"
#include "HW_ICU_interface.h"

static void (*Globalptrtofunc)(void)=NULL;
void HWICU_voidInit(void)
{
    19d0:	df 93       	push	r29
    19d2:	cf 93       	push	r28
    19d4:	cd b7       	in	r28, 0x3d	; 61
    19d6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK1,TIMSK1_TICIE1);
    19d8:	a9 e5       	ldi	r26, 0x59	; 89
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e9 e5       	ldi	r30, 0x59	; 89
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	91 81       	ldd	r25, Z+1	; 0x01
    19e4:	80 62       	ori	r24, 0x20	; 32
    19e6:	11 96       	adiw	r26, 0x01	; 1
    19e8:	9c 93       	st	X, r25
    19ea:	8e 93       	st	-X, r24
	SET_BIT(TCCR1B,TCCR1B_ICES1);
    19ec:	ae e4       	ldi	r26, 0x4E	; 78
    19ee:	b0 e0       	ldi	r27, 0x00	; 0
    19f0:	ee e4       	ldi	r30, 0x4E	; 78
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	80 81       	ld	r24, Z
    19f6:	80 64       	ori	r24, 0x40	; 64
    19f8:	8c 93       	st	X, r24

}
    19fa:	cf 91       	pop	r28
    19fc:	df 91       	pop	r29
    19fe:	08 95       	ret

00001a00 <HWICU_voidInerruptEnable>:
void HWICU_voidInerruptEnable(void){
    1a00:	df 93       	push	r29
    1a02:	cf 93       	push	r28
    1a04:	cd b7       	in	r28, 0x3d	; 61
    1a06:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK1,TIMSK1_TICIE1);
    1a08:	a9 e5       	ldi	r26, 0x59	; 89
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e9 e5       	ldi	r30, 0x59	; 89
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	80 62       	ori	r24, 0x20	; 32
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	9c 93       	st	X, r25
    1a1a:	8e 93       	st	-X, r24

}
    1a1c:	cf 91       	pop	r28
    1a1e:	df 91       	pop	r29
    1a20:	08 95       	ret

00001a22 <HWICU_voidInerruptDisnable>:
void HWICU_voidInerruptDisnable(void){
    1a22:	df 93       	push	r29
    1a24:	cf 93       	push	r28
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK1,TIMSK1_TICIE1);
    1a2a:	a9 e5       	ldi	r26, 0x59	; 89
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	e9 e5       	ldi	r30, 0x59	; 89
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	91 81       	ldd	r25, Z+1	; 0x01
    1a36:	8f 7d       	andi	r24, 0xDF	; 223
    1a38:	11 96       	adiw	r26, 0x01	; 1
    1a3a:	9c 93       	st	X, r25
    1a3c:	8e 93       	st	-X, r24
}
    1a3e:	cf 91       	pop	r28
    1a40:	df 91       	pop	r29
    1a42:	08 95       	ret

00001a44 <HWICU_voidSetTriggeredge>:
void HWICU_voidSetTriggeredge(u8 Copy_u8Edge)
{
    1a44:	df 93       	push	r29
    1a46:	cf 93       	push	r28
    1a48:	0f 92       	push	r0
    1a4a:	cd b7       	in	r28, 0x3d	; 61
    1a4c:	de b7       	in	r29, 0x3e	; 62
    1a4e:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Edge==RISING)
    1a50:	89 81       	ldd	r24, Y+1	; 0x01
    1a52:	81 30       	cpi	r24, 0x01	; 1
    1a54:	41 f4       	brne	.+16     	; 0x1a66 <HWICU_voidSetTriggeredge+0x22>
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1a56:	ae e4       	ldi	r26, 0x4E	; 78
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	ee e4       	ldi	r30, 0x4E	; 78
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 64       	ori	r24, 0x40	; 64
    1a62:	8c 93       	st	X, r24
    1a64:	0a c0       	rjmp	.+20     	; 0x1a7a <HWICU_voidSetTriggeredge+0x36>
	else if (Copy_u8Edge==FALLING)
    1a66:	89 81       	ldd	r24, Y+1	; 0x01
    1a68:	88 23       	and	r24, r24
    1a6a:	39 f4       	brne	.+14     	; 0x1a7a <HWICU_voidSetTriggeredge+0x36>
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1a6c:	ae e4       	ldi	r26, 0x4E	; 78
    1a6e:	b0 e0       	ldi	r27, 0x00	; 0
    1a70:	ee e4       	ldi	r30, 0x4E	; 78
    1a72:	f0 e0       	ldi	r31, 0x00	; 0
    1a74:	80 81       	ld	r24, Z
    1a76:	8f 7b       	andi	r24, 0xBF	; 191
    1a78:	8c 93       	st	X, r24
}
    1a7a:	0f 90       	pop	r0
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <HWICU_u16GetReading>:
u16 HWICU_u16GetReading(void)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	cd b7       	in	r28, 0x3d	; 61
    1a88:	de b7       	in	r29, 0x3e	; 62
return ICR1;
    1a8a:	e6 e4       	ldi	r30, 0x46	; 70
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
}
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <HWICU_voidSetCallBack>:
void HWICU_voidSetCallBack(void(*ptrtofunc)(void))
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <HWICU_voidSetCallBack+0x6>
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
	if (ptrtofunc!=NULL)
    1aa6:	89 81       	ldd	r24, Y+1	; 0x01
    1aa8:	9a 81       	ldd	r25, Y+2	; 0x02
    1aaa:	00 97       	sbiw	r24, 0x00	; 0
    1aac:	31 f0       	breq	.+12     	; 0x1aba <HWICU_voidSetCallBack+0x22>
		Globalptrtofunc=ptrtofunc;
    1aae:	89 81       	ldd	r24, Y+1	; 0x01
    1ab0:	9a 81       	ldd	r25, Y+2	; 0x02
    1ab2:	90 93 7f 00 	sts	0x007F, r25
    1ab6:	80 93 7e 00 	sts	0x007E, r24
}
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <__vector_6>:


void __vector_6(void)  __attribute__((signal));
void __vector_6(void)
{
    1ac4:	1f 92       	push	r1
    1ac6:	0f 92       	push	r0
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	0f 92       	push	r0
    1acc:	11 24       	eor	r1, r1
    1ace:	2f 93       	push	r18
    1ad0:	3f 93       	push	r19
    1ad2:	4f 93       	push	r20
    1ad4:	5f 93       	push	r21
    1ad6:	6f 93       	push	r22
    1ad8:	7f 93       	push	r23
    1ada:	8f 93       	push	r24
    1adc:	9f 93       	push	r25
    1ade:	af 93       	push	r26
    1ae0:	bf 93       	push	r27
    1ae2:	ef 93       	push	r30
    1ae4:	ff 93       	push	r31
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
	if (Globalptrtofunc!=NULL)
    1aee:	80 91 7e 00 	lds	r24, 0x007E
    1af2:	90 91 7f 00 	lds	r25, 0x007F
    1af6:	00 97       	sbiw	r24, 0x00	; 0
    1af8:	29 f0       	breq	.+10     	; 0x1b04 <__vector_6+0x40>
		Globalptrtofunc();
    1afa:	e0 91 7e 00 	lds	r30, 0x007E
    1afe:	f0 91 7f 00 	lds	r31, 0x007F
    1b02:	09 95       	icall
}
    1b04:	cf 91       	pop	r28
    1b06:	df 91       	pop	r29
    1b08:	ff 91       	pop	r31
    1b0a:	ef 91       	pop	r30
    1b0c:	bf 91       	pop	r27
    1b0e:	af 91       	pop	r26
    1b10:	9f 91       	pop	r25
    1b12:	8f 91       	pop	r24
    1b14:	7f 91       	pop	r23
    1b16:	6f 91       	pop	r22
    1b18:	5f 91       	pop	r21
    1b1a:	4f 91       	pop	r20
    1b1c:	3f 91       	pop	r19
    1b1e:	2f 91       	pop	r18
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	0f 90       	pop	r0
    1b26:	1f 90       	pop	r1
    1b28:	18 95       	reti

00001b2a <TIMER0_voidInit>:
#include "TIMER0_config.h"
#include "TIMER0_interface.h"

static void (*Global_ptrtofunc)(void) = NULL;

void TIMER0_voidInit(void){
    1b2a:	df 93       	push	r29
    1b2c:	cf 93       	push	r28
    1b2e:	cd b7       	in	r28, 0x3d	; 61
    1b30:	de b7       	in	r29, 0x3e	; 62

	//COMPARE MATCH FAST MODE
	SET_BIT(TCCR0,TCCR0_WGM01);
    1b32:	a3 e5       	ldi	r26, 0x53	; 83
    1b34:	b0 e0       	ldi	r27, 0x00	; 0
    1b36:	e3 e5       	ldi	r30, 0x53	; 83
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	80 81       	ld	r24, Z
    1b3c:	88 60       	ori	r24, 0x08	; 8
    1b3e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_WGM00);
    1b40:	a3 e5       	ldi	r26, 0x53	; 83
    1b42:	b0 e0       	ldi	r27, 0x00	; 0
    1b44:	e3 e5       	ldi	r30, 0x53	; 83
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	80 64       	ori	r24, 0x40	; 64
    1b4c:	8c 93       	st	X, r24

	//SET OCR0 64
	OCR0 = 64;
    1b4e:	ec e5       	ldi	r30, 0x5C	; 92
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	80 e4       	ldi	r24, 0x40	; 64
    1b54:	80 83       	st	Z, r24

	// CHOSE NON-INVERTED MODE
	CLR_BIT(TCCR0,TCCR0_COM00);
    1b56:	a3 e5       	ldi	r26, 0x53	; 83
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e3 e5       	ldi	r30, 0x53	; 83
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	8f 7e       	andi	r24, 0xEF	; 239
    1b62:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM01);
    1b64:	a3 e5       	ldi	r26, 0x53	; 83
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e3 e5       	ldi	r30, 0x53	; 83
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	80 62       	ori	r24, 0x20	; 32
    1b70:	8c 93       	st	X, r24

	// COMPARE MATCH INTERRUPT ENABLE
	//SET_BIT(TIMSK,TIMSK_OCIE0);

	//PRESCALLER 8
	CLR_BIT(TCCR0,TCCR0_CS00);
    1b72:	a3 e5       	ldi	r26, 0x53	; 83
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	e3 e5       	ldi	r30, 0x53	; 83
    1b78:	f0 e0       	ldi	r31, 0x00	; 0
    1b7a:	80 81       	ld	r24, Z
    1b7c:	8e 7f       	andi	r24, 0xFE	; 254
    1b7e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_CS01);
    1b80:	a3 e5       	ldi	r26, 0x53	; 83
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	e3 e5       	ldi	r30, 0x53	; 83
    1b86:	f0 e0       	ldi	r31, 0x00	; 0
    1b88:	80 81       	ld	r24, Z
    1b8a:	82 60       	ori	r24, 0x02	; 2
    1b8c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
    1b8e:	a3 e5       	ldi	r26, 0x53	; 83
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	e3 e5       	ldi	r30, 0x53	; 83
    1b94:	f0 e0       	ldi	r31, 0x00	; 0
    1b96:	80 81       	ld	r24, Z
    1b98:	8b 7f       	andi	r24, 0xFB	; 251
    1b9a:	8c 93       	st	X, r24
	SET_BIT(TCCR0,TCCR0_COM00);

#error ("WRONG VALUE")
#endif
*/
}
    1b9c:	cf 91       	pop	r28
    1b9e:	df 91       	pop	r29
    1ba0:	08 95       	ret

00001ba2 <TIMER0_voidSetCallBack>:

u8 TIMER0_voidSetCallBack(void (*Copy_ptrtofunc)(void)){
    1ba2:	df 93       	push	r29
    1ba4:	cf 93       	push	r28
    1ba6:	00 d0       	rcall	.+0      	; 0x1ba8 <TIMER0_voidSetCallBack+0x6>
    1ba8:	0f 92       	push	r0
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	9b 83       	std	Y+3, r25	; 0x03
    1bb0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Errorstate = OK;
    1bb2:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_ptrtofunc!=NULL){
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bb8:	00 97       	sbiw	r24, 0x00	; 0
    1bba:	39 f0       	breq	.+14     	; 0x1bca <TIMER0_voidSetCallBack+0x28>
		Global_ptrtofunc=Copy_ptrtofunc;
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	9b 81       	ldd	r25, Y+3	; 0x03
    1bc0:	90 93 81 00 	sts	0x0081, r25
    1bc4:	80 93 80 00 	sts	0x0080, r24
    1bc8:	02 c0       	rjmp	.+4      	; 0x1bce <TIMER0_voidSetCallBack+0x2c>
	}
	else{
		Local_u8Errorstate = NOK;
    1bca:	81 e0       	ldi	r24, 0x01	; 1
    1bcc:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Errorstate;
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	cf 91       	pop	r28
    1bd8:	df 91       	pop	r29
    1bda:	08 95       	ret

00001bdc <__vector_10>:

void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    1bdc:	1f 92       	push	r1
    1bde:	0f 92       	push	r0
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	0f 92       	push	r0
    1be4:	11 24       	eor	r1, r1
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
		if(Global_ptrtofunc!=NULL){
			Global_ptrtofunc();
			Local_u16Counter=0;
		}
	}*/
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	0f 90       	pop	r0
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	0f 90       	pop	r0
    1bf8:	1f 90       	pop	r1
    1bfa:	18 95       	reti

00001bfc <TIMER0_voidSetOcrValue>:

void TIMER0_voidSetOcrValue(u8 Copy_u8Value){
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	0f 92       	push	r0
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62
    1c06:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = Copy_u8Value;
    1c08:	ec e5       	ldi	r30, 0x5C	; 92
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	80 83       	st	Z, r24
}
    1c10:	0f 90       	pop	r0
    1c12:	cf 91       	pop	r28
    1c14:	df 91       	pop	r29
    1c16:	08 95       	ret

00001c18 <TIMER1_voidInit>:
#include "TIMER1_private.h"
#include "TIMER1_config.h"
#include "TIMER1_interface.h"


void TIMER1_voidInit (void){
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62


	//pre scaler 8
	CLR_BIT(TCCR1B,TCCR1B_CS10);
    1c20:	ae e4       	ldi	r26, 0x4E	; 78
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	ee e4       	ldi	r30, 0x4E	; 78
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	8e 7f       	andi	r24, 0xFE	; 254
    1c2c:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_CS11);
    1c2e:	ae e4       	ldi	r26, 0x4E	; 78
    1c30:	b0 e0       	ldi	r27, 0x00	; 0
    1c32:	ee e4       	ldi	r30, 0x4E	; 78
    1c34:	f0 e0       	ldi	r31, 0x00	; 0
    1c36:	80 81       	ld	r24, Z
    1c38:	82 60       	ori	r24, 0x02	; 2
    1c3a:	8c 93       	st	X, r24
	CLR_BIT(TCCR1B,TCCR1B_CS12);
    1c3c:	ae e4       	ldi	r26, 0x4E	; 78
    1c3e:	b0 e0       	ldi	r27, 0x00	; 0
    1c40:	ee e4       	ldi	r30, 0x4E	; 78
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	8b 7f       	andi	r24, 0xFB	; 251
    1c48:	8c 93       	st	X, r24

}
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <TIMER1_voidWriteVal>:


void TIMER1_voidWriteVal(u16 value)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <TIMER1_voidWriteVal+0x6>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
TCNT1=value;
    1c5e:	ec e4       	ldi	r30, 0x4C	; 76
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	9a 81       	ldd	r25, Y+2	; 0x02
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	80 83       	st	Z, r24
}
    1c6a:	0f 90       	pop	r0
    1c6c:	0f 90       	pop	r0
    1c6e:	cf 91       	pop	r28
    1c70:	df 91       	pop	r29
    1c72:	08 95       	ret

00001c74 <TIMER1_u16GetVal>:

u16 TIMER1_u16GetVal(void)
{
    1c74:	df 93       	push	r29
    1c76:	cf 93       	push	r28
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
return TCNT1;
    1c7c:	ec e4       	ldi	r30, 0x4C	; 76
    1c7e:	f0 e0       	ldi	r31, 0x00	; 0
    1c80:	80 81       	ld	r24, Z
    1c82:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c84:	cf 91       	pop	r28
    1c86:	df 91       	pop	r29
    1c88:	08 95       	ret

00001c8a <main>:
#include "HW_ICU_interface.h"
void HW_ICU(void);
static u16 onticks,periodticks;

void main (void)
{
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
DIO_voidSetPinDir(PORTB_REG,PIN3,PIN_DIR_OUT);
    1c92:	82 e0       	ldi	r24, 0x02	; 2
    1c94:	63 e0       	ldi	r22, 0x03	; 3
    1c96:	41 e0       	ldi	r20, 0x01	; 1
    1c98:	0e 94 00 0a 	call	0x1400	; 0x1400 <DIO_voidSetPinDir>
DIO_voidSetPinDir(PORTD_REG,PIN6,PIN_DIR_IN);
    1c9c:	84 e0       	ldi	r24, 0x04	; 4
    1c9e:	66 e0       	ldi	r22, 0x06	; 6
    1ca0:	40 e0       	ldi	r20, 0x00	; 0
    1ca2:	0e 94 00 0a 	call	0x1400	; 0x1400 <DIO_voidSetPinDir>
DIO_voidSetPortDir(PORTA_REG,PORT_DIR_OUT);
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	6f ef       	ldi	r22, 0xFF	; 255
    1caa:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_voidSetPortDir>
DIO_voidSetPortDir(PORTC_REG,PORT_DIR_OUT);
    1cae:	83 e0       	ldi	r24, 0x03	; 3
    1cb0:	6f ef       	ldi	r22, 0xFF	; 255
    1cb2:	0e 94 be 09 	call	0x137c	; 0x137c <DIO_voidSetPortDir>

CLCD_voidInit();
    1cb6:	0e 94 df 06 	call	0xdbe	; 0xdbe <CLCD_voidInit>
TIMER0_voidInit();
    1cba:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <TIMER0_voidInit>
TIMER1_voidInit();
    1cbe:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <TIMER1_voidInit>
HWICU_voidInit();
    1cc2:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <HWICU_voidInit>
HWICU_voidSetCallBack(HW_ICU);
    1cc6:	80 e9       	ldi	r24, 0x90	; 144
    1cc8:	9e e0       	ldi	r25, 0x0E	; 14
    1cca:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <HWICU_voidSetCallBack>
GIE_voidEnable();
    1cce:	0e 94 cc 0c 	call	0x1998	; 0x1998 <GIE_voidEnable>

while(1)
{
CLCD_voidSetPosition(0,0);
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	0e 94 62 09 	call	0x12c4	; 0x12c4 <CLCD_voidSetPosition>
CLCD_voidSendString("ONTICKS : ");
    1cda:	80 e6       	ldi	r24, 0x60	; 96
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
CLCD_voidSendNum(onticks);
    1ce2:	80 91 89 00 	lds	r24, 0x0089
    1ce6:	90 91 8a 00 	lds	r25, 0x008A
    1cea:	cc 01       	movw	r24, r24
    1cec:	a0 e0       	ldi	r26, 0x00	; 0
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	bc 01       	movw	r22, r24
    1cf2:	cd 01       	movw	r24, r26
    1cf4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <CLCD_voidSendNum>
CLCD_voidSetPosition(1,0);
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	60 e0       	ldi	r22, 0x00	; 0
    1cfc:	0e 94 62 09 	call	0x12c4	; 0x12c4 <CLCD_voidSetPosition>
CLCD_voidSendString("P_Ticks : ");
    1d00:	8b e6       	ldi	r24, 0x6B	; 107
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	0e 94 c3 08 	call	0x1186	; 0x1186 <CLCD_voidSendString>
CLCD_voidSendNum(periodticks);
    1d08:	80 91 8b 00 	lds	r24, 0x008B
    1d0c:	90 91 8c 00 	lds	r25, 0x008C
    1d10:	cc 01       	movw	r24, r24
    1d12:	a0 e0       	ldi	r26, 0x00	; 0
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	bc 01       	movw	r22, r24
    1d18:	cd 01       	movw	r24, r26
    1d1a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <CLCD_voidSendNum>
    1d1e:	d9 cf       	rjmp	.-78     	; 0x1cd2 <main+0x48>

00001d20 <HW_ICU>:
}



void HW_ICU(void)
{
    1d20:	df 93       	push	r29
    1d22:	cf 93       	push	r28
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
	static u8 counter=0;
	static u16 reading1=0,reading2=0,reading3=0;
	counter++;
    1d28:	80 91 88 00 	lds	r24, 0x0088
    1d2c:	8f 5f       	subi	r24, 0xFF	; 255
    1d2e:	80 93 88 00 	sts	0x0088, r24
	if(counter==1)
    1d32:	80 91 88 00 	lds	r24, 0x0088
    1d36:	81 30       	cpi	r24, 0x01	; 1
    1d38:	39 f4       	brne	.+14     	; 0x1d48 <HW_ICU+0x28>
	{
		reading1= HWICU_u16GetReading();
    1d3a:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HWICU_u16GetReading>
    1d3e:	90 93 87 00 	sts	0x0087, r25
    1d42:	80 93 86 00 	sts	0x0086, r24
    1d46:	3a c0       	rjmp	.+116    	; 0x1dbc <HW_ICU+0x9c>
	}
	else if (counter==2)
    1d48:	80 91 88 00 	lds	r24, 0x0088
    1d4c:	82 30       	cpi	r24, 0x02	; 2
    1d4e:	d1 f4       	brne	.+52     	; 0x1d84 <HW_ICU+0x64>
	{
		reading2= HWICU_u16GetReading();
    1d50:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HWICU_u16GetReading>
    1d54:	90 93 85 00 	sts	0x0085, r25
    1d58:	80 93 84 00 	sts	0x0084, r24
		periodticks=reading2-reading1;
    1d5c:	20 91 84 00 	lds	r18, 0x0084
    1d60:	30 91 85 00 	lds	r19, 0x0085
    1d64:	80 91 86 00 	lds	r24, 0x0086
    1d68:	90 91 87 00 	lds	r25, 0x0087
    1d6c:	a9 01       	movw	r20, r18
    1d6e:	48 1b       	sub	r20, r24
    1d70:	59 0b       	sbc	r21, r25
    1d72:	ca 01       	movw	r24, r20
    1d74:	90 93 8c 00 	sts	0x008C, r25
    1d78:	80 93 8b 00 	sts	0x008B, r24
		HWICU_voidSetTriggeredge(FALLING);
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <HWICU_voidSetTriggeredge>
    1d82:	1c c0       	rjmp	.+56     	; 0x1dbc <HW_ICU+0x9c>
	}
	else if (counter==3)
    1d84:	80 91 88 00 	lds	r24, 0x0088
    1d88:	83 30       	cpi	r24, 0x03	; 3
    1d8a:	c1 f4       	brne	.+48     	; 0x1dbc <HW_ICU+0x9c>
	{
		reading3= HWICU_u16GetReading();
    1d8c:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <HWICU_u16GetReading>
    1d90:	90 93 83 00 	sts	0x0083, r25
    1d94:	80 93 82 00 	sts	0x0082, r24
		onticks=reading3-reading2;
    1d98:	20 91 82 00 	lds	r18, 0x0082
    1d9c:	30 91 83 00 	lds	r19, 0x0083
    1da0:	80 91 84 00 	lds	r24, 0x0084
    1da4:	90 91 85 00 	lds	r25, 0x0085
    1da8:	a9 01       	movw	r20, r18
    1daa:	48 1b       	sub	r20, r24
    1dac:	59 0b       	sbc	r21, r25
    1dae:	ca 01       	movw	r24, r20
    1db0:	90 93 8a 00 	sts	0x008A, r25
    1db4:	80 93 89 00 	sts	0x0089, r24
		HWICU_voidInerruptDisnable();
    1db8:	0e 94 11 0d 	call	0x1a22	; 0x1a22 <HWICU_voidInerruptDisnable>
	}
}
    1dbc:	cf 91       	pop	r28
    1dbe:	df 91       	pop	r29
    1dc0:	08 95       	ret

00001dc2 <__udivmodsi4>:
    1dc2:	a1 e2       	ldi	r26, 0x21	; 33
    1dc4:	1a 2e       	mov	r1, r26
    1dc6:	aa 1b       	sub	r26, r26
    1dc8:	bb 1b       	sub	r27, r27
    1dca:	fd 01       	movw	r30, r26
    1dcc:	0d c0       	rjmp	.+26     	; 0x1de8 <__udivmodsi4_ep>

00001dce <__udivmodsi4_loop>:
    1dce:	aa 1f       	adc	r26, r26
    1dd0:	bb 1f       	adc	r27, r27
    1dd2:	ee 1f       	adc	r30, r30
    1dd4:	ff 1f       	adc	r31, r31
    1dd6:	a2 17       	cp	r26, r18
    1dd8:	b3 07       	cpc	r27, r19
    1dda:	e4 07       	cpc	r30, r20
    1ddc:	f5 07       	cpc	r31, r21
    1dde:	20 f0       	brcs	.+8      	; 0x1de8 <__udivmodsi4_ep>
    1de0:	a2 1b       	sub	r26, r18
    1de2:	b3 0b       	sbc	r27, r19
    1de4:	e4 0b       	sbc	r30, r20
    1de6:	f5 0b       	sbc	r31, r21

00001de8 <__udivmodsi4_ep>:
    1de8:	66 1f       	adc	r22, r22
    1dea:	77 1f       	adc	r23, r23
    1dec:	88 1f       	adc	r24, r24
    1dee:	99 1f       	adc	r25, r25
    1df0:	1a 94       	dec	r1
    1df2:	69 f7       	brne	.-38     	; 0x1dce <__udivmodsi4_loop>
    1df4:	60 95       	com	r22
    1df6:	70 95       	com	r23
    1df8:	80 95       	com	r24
    1dfa:	90 95       	com	r25
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	ac 01       	movw	r20, r24
    1e00:	bd 01       	movw	r22, r26
    1e02:	cf 01       	movw	r24, r30
    1e04:	08 95       	ret

00001e06 <__prologue_saves__>:
    1e06:	2f 92       	push	r2
    1e08:	3f 92       	push	r3
    1e0a:	4f 92       	push	r4
    1e0c:	5f 92       	push	r5
    1e0e:	6f 92       	push	r6
    1e10:	7f 92       	push	r7
    1e12:	8f 92       	push	r8
    1e14:	9f 92       	push	r9
    1e16:	af 92       	push	r10
    1e18:	bf 92       	push	r11
    1e1a:	cf 92       	push	r12
    1e1c:	df 92       	push	r13
    1e1e:	ef 92       	push	r14
    1e20:	ff 92       	push	r15
    1e22:	0f 93       	push	r16
    1e24:	1f 93       	push	r17
    1e26:	cf 93       	push	r28
    1e28:	df 93       	push	r29
    1e2a:	cd b7       	in	r28, 0x3d	; 61
    1e2c:	de b7       	in	r29, 0x3e	; 62
    1e2e:	ca 1b       	sub	r28, r26
    1e30:	db 0b       	sbc	r29, r27
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	de bf       	out	0x3e, r29	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	cd bf       	out	0x3d, r28	; 61
    1e3c:	09 94       	ijmp

00001e3e <__epilogue_restores__>:
    1e3e:	2a 88       	ldd	r2, Y+18	; 0x12
    1e40:	39 88       	ldd	r3, Y+17	; 0x11
    1e42:	48 88       	ldd	r4, Y+16	; 0x10
    1e44:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e46:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e48:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e50:	b9 84       	ldd	r11, Y+9	; 0x09
    1e52:	c8 84       	ldd	r12, Y+8	; 0x08
    1e54:	df 80       	ldd	r13, Y+7	; 0x07
    1e56:	ee 80       	ldd	r14, Y+6	; 0x06
    1e58:	fd 80       	ldd	r15, Y+5	; 0x05
    1e5a:	0c 81       	ldd	r16, Y+4	; 0x04
    1e5c:	1b 81       	ldd	r17, Y+3	; 0x03
    1e5e:	aa 81       	ldd	r26, Y+2	; 0x02
    1e60:	b9 81       	ldd	r27, Y+1	; 0x01
    1e62:	ce 0f       	add	r28, r30
    1e64:	d1 1d       	adc	r29, r1
    1e66:	0f b6       	in	r0, 0x3f	; 63
    1e68:	f8 94       	cli
    1e6a:	de bf       	out	0x3e, r29	; 62
    1e6c:	0f be       	out	0x3f, r0	; 63
    1e6e:	cd bf       	out	0x3d, r28	; 61
    1e70:	ed 01       	movw	r28, r26
    1e72:	08 95       	ret

00001e74 <_exit>:
    1e74:	f8 94       	cli

00001e76 <__stop_program>:
    1e76:	ff cf       	rjmp	.-2      	; 0x1e76 <__stop_program>
