
SPI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000077c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000007f8  00000000  00000000  000007d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      0000042b  00000000  00000000  00000fc8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 99 03 	call	0x732	; 0x732 <main>
  64:	0c 94 bc 03 	jmp	0x778	; 0x778 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_voidSetPortDir>:
#include "DIO_private.h"
#include "DIO_config.h"
#include "DIO_interface.h"

void DIO_voidSetPortDir(u8 Copy_u8Port,u8 Copy_u8Dir)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_voidSetPortDir+0x6>
  72:	00 d0       	rcall	.+0      	; 0x74 <DIO_voidSetPortDir+0x8>
  74:	cd b7       	in	r28, 0x3d	; 61
  76:	de b7       	in	r29, 0x3e	; 62
  78:	89 83       	std	Y+1, r24	; 0x01
  7a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	28 2f       	mov	r18, r24
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	3c 83       	std	Y+4, r19	; 0x04
  84:	2b 83       	std	Y+3, r18	; 0x03
  86:	8b 81       	ldd	r24, Y+3	; 0x03
  88:	9c 81       	ldd	r25, Y+4	; 0x04
  8a:	82 30       	cpi	r24, 0x02	; 2
  8c:	91 05       	cpc	r25, r1
  8e:	d9 f0       	breq	.+54     	; 0xc6 <DIO_voidSetPortDir+0x5a>
  90:	2b 81       	ldd	r18, Y+3	; 0x03
  92:	3c 81       	ldd	r19, Y+4	; 0x04
  94:	23 30       	cpi	r18, 0x03	; 3
  96:	31 05       	cpc	r19, r1
  98:	34 f4       	brge	.+12     	; 0xa6 <DIO_voidSetPortDir+0x3a>
  9a:	8b 81       	ldd	r24, Y+3	; 0x03
  9c:	9c 81       	ldd	r25, Y+4	; 0x04
  9e:	81 30       	cpi	r24, 0x01	; 1
  a0:	91 05       	cpc	r25, r1
  a2:	61 f0       	breq	.+24     	; 0xbc <DIO_voidSetPortDir+0x50>
  a4:	1e c0       	rjmp	.+60     	; 0xe2 <DIO_voidSetPortDir+0x76>
  a6:	2b 81       	ldd	r18, Y+3	; 0x03
  a8:	3c 81       	ldd	r19, Y+4	; 0x04
  aa:	23 30       	cpi	r18, 0x03	; 3
  ac:	31 05       	cpc	r19, r1
  ae:	81 f0       	breq	.+32     	; 0xd0 <DIO_voidSetPortDir+0x64>
  b0:	8b 81       	ldd	r24, Y+3	; 0x03
  b2:	9c 81       	ldd	r25, Y+4	; 0x04
  b4:	84 30       	cpi	r24, 0x04	; 4
  b6:	91 05       	cpc	r25, r1
  b8:	81 f0       	breq	.+32     	; 0xda <DIO_voidSetPortDir+0x6e>
  ba:	13 c0       	rjmp	.+38     	; 0xe2 <DIO_voidSetPortDir+0x76>
	{
	case PORTA_REG:DDRA=Copy_u8Dir;break;
  bc:	ea e3       	ldi	r30, 0x3A	; 58
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	8a 81       	ldd	r24, Y+2	; 0x02
  c2:	80 83       	st	Z, r24
  c4:	0e c0       	rjmp	.+28     	; 0xe2 <DIO_voidSetPortDir+0x76>
	case PORTB_REG:DDRB=Copy_u8Dir;break;
  c6:	e7 e3       	ldi	r30, 0x37	; 55
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	8a 81       	ldd	r24, Y+2	; 0x02
  cc:	80 83       	st	Z, r24
  ce:	09 c0       	rjmp	.+18     	; 0xe2 <DIO_voidSetPortDir+0x76>
	case PORTC_REG:DDRC=Copy_u8Dir;break;
  d0:	e4 e3       	ldi	r30, 0x34	; 52
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	8a 81       	ldd	r24, Y+2	; 0x02
  d6:	80 83       	st	Z, r24
  d8:	04 c0       	rjmp	.+8      	; 0xe2 <DIO_voidSetPortDir+0x76>
	case PORTD_REG:DDRD=Copy_u8Dir;break;
  da:	e1 e3       	ldi	r30, 0x31	; 49
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	80 83       	st	Z, r24
	}

}
  e2:	0f 90       	pop	r0
  e4:	0f 90       	pop	r0
  e6:	0f 90       	pop	r0
  e8:	0f 90       	pop	r0
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

000000f0 <DIO_voidSetPinDir>:
void DIO_voidSetPinDir(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Dir)
{
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	cd b7       	in	r28, 0x3d	; 61
  f6:	de b7       	in	r29, 0x3e	; 62
  f8:	27 97       	sbiw	r28, 0x07	; 7
  fa:	0f b6       	in	r0, 0x3f	; 63
  fc:	f8 94       	cli
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0f be       	out	0x3f, r0	; 63
 102:	cd bf       	out	0x3d, r28	; 61
 104:	89 83       	std	Y+1, r24	; 0x01
 106:	6a 83       	std	Y+2, r22	; 0x02
 108:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Pin <=7)
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	88 30       	cpi	r24, 0x08	; 8
 10e:	08 f0       	brcs	.+2      	; 0x112 <DIO_voidSetPinDir+0x22>
 110:	ec c0       	rjmp	.+472    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
	{
		if (Copy_u8Dir==PIN_DIR_OUT)
 112:	8b 81       	ldd	r24, Y+3	; 0x03
 114:	81 30       	cpi	r24, 0x01	; 1
 116:	09 f0       	breq	.+2      	; 0x11a <DIO_voidSetPinDir+0x2a>
 118:	70 c0       	rjmp	.+224    	; 0x1fa <DIO_voidSetPinDir+0x10a>
		{
			switch(Copy_u8Port)
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	28 2f       	mov	r18, r24
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	3f 83       	std	Y+7, r19	; 0x07
 122:	2e 83       	std	Y+6, r18	; 0x06
 124:	8e 81       	ldd	r24, Y+6	; 0x06
 126:	9f 81       	ldd	r25, Y+7	; 0x07
 128:	82 30       	cpi	r24, 0x02	; 2
 12a:	91 05       	cpc	r25, r1
 12c:	51 f1       	breq	.+84     	; 0x182 <DIO_voidSetPinDir+0x92>
 12e:	2e 81       	ldd	r18, Y+6	; 0x06
 130:	3f 81       	ldd	r19, Y+7	; 0x07
 132:	23 30       	cpi	r18, 0x03	; 3
 134:	31 05       	cpc	r19, r1
 136:	34 f4       	brge	.+12     	; 0x144 <DIO_voidSetPinDir+0x54>
 138:	8e 81       	ldd	r24, Y+6	; 0x06
 13a:	9f 81       	ldd	r25, Y+7	; 0x07
 13c:	81 30       	cpi	r24, 0x01	; 1
 13e:	91 05       	cpc	r25, r1
 140:	61 f0       	breq	.+24     	; 0x15a <DIO_voidSetPinDir+0x6a>
 142:	d3 c0       	rjmp	.+422    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
 144:	2e 81       	ldd	r18, Y+6	; 0x06
 146:	3f 81       	ldd	r19, Y+7	; 0x07
 148:	23 30       	cpi	r18, 0x03	; 3
 14a:	31 05       	cpc	r19, r1
 14c:	71 f1       	breq	.+92     	; 0x1aa <DIO_voidSetPinDir+0xba>
 14e:	8e 81       	ldd	r24, Y+6	; 0x06
 150:	9f 81       	ldd	r25, Y+7	; 0x07
 152:	84 30       	cpi	r24, 0x04	; 4
 154:	91 05       	cpc	r25, r1
 156:	e9 f1       	breq	.+122    	; 0x1d2 <DIO_voidSetPinDir+0xe2>
 158:	c8 c0       	rjmp	.+400    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
			{
			case PORTA_REG : SET_BIT(DDRA,Copy_u8Pin);break;
 15a:	aa e3       	ldi	r26, 0x3A	; 58
 15c:	b0 e0       	ldi	r27, 0x00	; 0
 15e:	ea e3       	ldi	r30, 0x3A	; 58
 160:	f0 e0       	ldi	r31, 0x00	; 0
 162:	80 81       	ld	r24, Z
 164:	48 2f       	mov	r20, r24
 166:	8a 81       	ldd	r24, Y+2	; 0x02
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	02 2e       	mov	r0, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <DIO_voidSetPinDir+0x88>
 174:	88 0f       	add	r24, r24
 176:	99 1f       	adc	r25, r25
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <DIO_voidSetPinDir+0x84>
 17c:	84 2b       	or	r24, r20
 17e:	8c 93       	st	X, r24
 180:	b4 c0       	rjmp	.+360    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG : SET_BIT(DDRB,Copy_u8Pin);break;
 182:	a7 e3       	ldi	r26, 0x37	; 55
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e7 e3       	ldi	r30, 0x37	; 55
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	48 2f       	mov	r20, r24
 18e:	8a 81       	ldd	r24, Y+2	; 0x02
 190:	28 2f       	mov	r18, r24
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	02 2e       	mov	r0, r18
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_voidSetPinDir+0xb0>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	0a 94       	dec	r0
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_voidSetPinDir+0xac>
 1a4:	84 2b       	or	r24, r20
 1a6:	8c 93       	st	X, r24
 1a8:	a0 c0       	rjmp	.+320    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG : SET_BIT(DDRC,Copy_u8Pin);break;
 1aa:	a4 e3       	ldi	r26, 0x34	; 52
 1ac:	b0 e0       	ldi	r27, 0x00	; 0
 1ae:	e4 e3       	ldi	r30, 0x34	; 52
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	48 2f       	mov	r20, r24
 1b6:	8a 81       	ldd	r24, Y+2	; 0x02
 1b8:	28 2f       	mov	r18, r24
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	02 2e       	mov	r0, r18
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_voidSetPinDir+0xd8>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	0a 94       	dec	r0
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_voidSetPinDir+0xd4>
 1cc:	84 2b       	or	r24, r20
 1ce:	8c 93       	st	X, r24
 1d0:	8c c0       	rjmp	.+280    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG : SET_BIT(DDRD,Copy_u8Pin);break;
 1d2:	a1 e3       	ldi	r26, 0x31	; 49
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e1 e3       	ldi	r30, 0x31	; 49
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	8a 81       	ldd	r24, Y+2	; 0x02
 1e0:	28 2f       	mov	r18, r24
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	02 2e       	mov	r0, r18
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_voidSetPinDir+0x100>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	0a 94       	dec	r0
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_voidSetPinDir+0xfc>
 1f4:	84 2b       	or	r24, r20
 1f6:	8c 93       	st	X, r24
 1f8:	78 c0       	rjmp	.+240    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
			}
		}
		else if (Copy_u8Dir==PIN_DIR_IN)
 1fa:	8b 81       	ldd	r24, Y+3	; 0x03
 1fc:	88 23       	and	r24, r24
 1fe:	09 f0       	breq	.+2      	; 0x202 <DIO_voidSetPinDir+0x112>
 200:	74 c0       	rjmp	.+232    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
		{
			switch(Copy_u8Port)
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	28 2f       	mov	r18, r24
 206:	30 e0       	ldi	r19, 0x00	; 0
 208:	3d 83       	std	Y+5, r19	; 0x05
 20a:	2c 83       	std	Y+4, r18	; 0x04
 20c:	8c 81       	ldd	r24, Y+4	; 0x04
 20e:	9d 81       	ldd	r25, Y+5	; 0x05
 210:	82 30       	cpi	r24, 0x02	; 2
 212:	91 05       	cpc	r25, r1
 214:	61 f1       	breq	.+88     	; 0x26e <DIO_voidSetPinDir+0x17e>
 216:	2c 81       	ldd	r18, Y+4	; 0x04
 218:	3d 81       	ldd	r19, Y+5	; 0x05
 21a:	23 30       	cpi	r18, 0x03	; 3
 21c:	31 05       	cpc	r19, r1
 21e:	34 f4       	brge	.+12     	; 0x22c <DIO_voidSetPinDir+0x13c>
 220:	8c 81       	ldd	r24, Y+4	; 0x04
 222:	9d 81       	ldd	r25, Y+5	; 0x05
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	91 05       	cpc	r25, r1
 228:	69 f0       	breq	.+26     	; 0x244 <DIO_voidSetPinDir+0x154>
 22a:	5f c0       	rjmp	.+190    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
 22c:	2c 81       	ldd	r18, Y+4	; 0x04
 22e:	3d 81       	ldd	r19, Y+5	; 0x05
 230:	23 30       	cpi	r18, 0x03	; 3
 232:	31 05       	cpc	r19, r1
 234:	89 f1       	breq	.+98     	; 0x298 <DIO_voidSetPinDir+0x1a8>
 236:	8c 81       	ldd	r24, Y+4	; 0x04
 238:	9d 81       	ldd	r25, Y+5	; 0x05
 23a:	84 30       	cpi	r24, 0x04	; 4
 23c:	91 05       	cpc	r25, r1
 23e:	09 f4       	brne	.+2      	; 0x242 <DIO_voidSetPinDir+0x152>
 240:	40 c0       	rjmp	.+128    	; 0x2c2 <DIO_voidSetPinDir+0x1d2>
 242:	53 c0       	rjmp	.+166    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
			{
			case PORTA_REG : CLR_BIT(DDRA,Copy_u8Pin);break;
 244:	aa e3       	ldi	r26, 0x3A	; 58
 246:	b0 e0       	ldi	r27, 0x00	; 0
 248:	ea e3       	ldi	r30, 0x3A	; 58
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	80 81       	ld	r24, Z
 24e:	48 2f       	mov	r20, r24
 250:	8a 81       	ldd	r24, Y+2	; 0x02
 252:	28 2f       	mov	r18, r24
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	90 e0       	ldi	r25, 0x00	; 0
 25a:	02 2e       	mov	r0, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_voidSetPinDir+0x172>
 25e:	88 0f       	add	r24, r24
 260:	99 1f       	adc	r25, r25
 262:	0a 94       	dec	r0
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_voidSetPinDir+0x16e>
 266:	80 95       	com	r24
 268:	84 23       	and	r24, r20
 26a:	8c 93       	st	X, r24
 26c:	3e c0       	rjmp	.+124    	; 0x2ea <DIO_voidSetPinDir+0x1fa>
			case PORTB_REG : CLR_BIT(DDRB,Copy_u8Pin);break;
 26e:	a7 e3       	ldi	r26, 0x37	; 55
 270:	b0 e0       	ldi	r27, 0x00	; 0
 272:	e7 e3       	ldi	r30, 0x37	; 55
 274:	f0 e0       	ldi	r31, 0x00	; 0
 276:	80 81       	ld	r24, Z
 278:	48 2f       	mov	r20, r24
 27a:	8a 81       	ldd	r24, Y+2	; 0x02
 27c:	28 2f       	mov	r18, r24
 27e:	30 e0       	ldi	r19, 0x00	; 0
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	02 2e       	mov	r0, r18
 286:	02 c0       	rjmp	.+4      	; 0x28c <DIO_voidSetPinDir+0x19c>
 288:	88 0f       	add	r24, r24
 28a:	99 1f       	adc	r25, r25
 28c:	0a 94       	dec	r0
 28e:	e2 f7       	brpl	.-8      	; 0x288 <DIO_voidSetPinDir+0x198>
 290:	80 95       	com	r24
 292:	84 23       	and	r24, r20
 294:	8c 93       	st	X, r24
 296:	29 c0       	rjmp	.+82     	; 0x2ea <DIO_voidSetPinDir+0x1fa>
			case PORTC_REG : CLR_BIT(DDRC,Copy_u8Pin);break;
 298:	a4 e3       	ldi	r26, 0x34	; 52
 29a:	b0 e0       	ldi	r27, 0x00	; 0
 29c:	e4 e3       	ldi	r30, 0x34	; 52
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	48 2f       	mov	r20, r24
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	28 2f       	mov	r18, r24
 2a8:	30 e0       	ldi	r19, 0x00	; 0
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 2e       	mov	r0, r18
 2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <DIO_voidSetPinDir+0x1c6>
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	0a 94       	dec	r0
 2b8:	e2 f7       	brpl	.-8      	; 0x2b2 <DIO_voidSetPinDir+0x1c2>
 2ba:	80 95       	com	r24
 2bc:	84 23       	and	r24, r20
 2be:	8c 93       	st	X, r24
 2c0:	14 c0       	rjmp	.+40     	; 0x2ea <DIO_voidSetPinDir+0x1fa>
			case PORTD_REG : CLR_BIT(DDRD,Copy_u8Pin);break;
 2c2:	a1 e3       	ldi	r26, 0x31	; 49
 2c4:	b0 e0       	ldi	r27, 0x00	; 0
 2c6:	e1 e3       	ldi	r30, 0x31	; 49
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	80 81       	ld	r24, Z
 2cc:	48 2f       	mov	r20, r24
 2ce:	8a 81       	ldd	r24, Y+2	; 0x02
 2d0:	28 2f       	mov	r18, r24
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 2e       	mov	r0, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_voidSetPinDir+0x1f0>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_voidSetPinDir+0x1ec>
 2e4:	80 95       	com	r24
 2e6:	84 23       	and	r24, r20
 2e8:	8c 93       	st	X, r24
			}
		}
	}
}
 2ea:	27 96       	adiw	r28, 0x07	; 7
 2ec:	0f b6       	in	r0, 0x3f	; 63
 2ee:	f8 94       	cli
 2f0:	de bf       	out	0x3e, r29	; 62
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	cd bf       	out	0x3d, r28	; 61
 2f6:	cf 91       	pop	r28
 2f8:	df 91       	pop	r29
 2fa:	08 95       	ret

000002fc <DIO_voidSetPortVal>:
void DIO_voidSetPortVal(u8 Copy_u8Port,u8 Copy_u8Val){
 2fc:	df 93       	push	r29
 2fe:	cf 93       	push	r28
 300:	00 d0       	rcall	.+0      	; 0x302 <DIO_voidSetPortVal+0x6>
 302:	00 d0       	rcall	.+0      	; 0x304 <DIO_voidSetPortVal+0x8>
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	89 83       	std	Y+1, r24	; 0x01
 30a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Copy_u8Port)
 30c:	89 81       	ldd	r24, Y+1	; 0x01
 30e:	28 2f       	mov	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	3c 83       	std	Y+4, r19	; 0x04
 314:	2b 83       	std	Y+3, r18	; 0x03
 316:	8b 81       	ldd	r24, Y+3	; 0x03
 318:	9c 81       	ldd	r25, Y+4	; 0x04
 31a:	82 30       	cpi	r24, 0x02	; 2
 31c:	91 05       	cpc	r25, r1
 31e:	d9 f0       	breq	.+54     	; 0x356 <DIO_voidSetPortVal+0x5a>
 320:	2b 81       	ldd	r18, Y+3	; 0x03
 322:	3c 81       	ldd	r19, Y+4	; 0x04
 324:	23 30       	cpi	r18, 0x03	; 3
 326:	31 05       	cpc	r19, r1
 328:	34 f4       	brge	.+12     	; 0x336 <DIO_voidSetPortVal+0x3a>
 32a:	8b 81       	ldd	r24, Y+3	; 0x03
 32c:	9c 81       	ldd	r25, Y+4	; 0x04
 32e:	81 30       	cpi	r24, 0x01	; 1
 330:	91 05       	cpc	r25, r1
 332:	61 f0       	breq	.+24     	; 0x34c <DIO_voidSetPortVal+0x50>
 334:	1e c0       	rjmp	.+60     	; 0x372 <DIO_voidSetPortVal+0x76>
 336:	2b 81       	ldd	r18, Y+3	; 0x03
 338:	3c 81       	ldd	r19, Y+4	; 0x04
 33a:	23 30       	cpi	r18, 0x03	; 3
 33c:	31 05       	cpc	r19, r1
 33e:	81 f0       	breq	.+32     	; 0x360 <DIO_voidSetPortVal+0x64>
 340:	8b 81       	ldd	r24, Y+3	; 0x03
 342:	9c 81       	ldd	r25, Y+4	; 0x04
 344:	84 30       	cpi	r24, 0x04	; 4
 346:	91 05       	cpc	r25, r1
 348:	81 f0       	breq	.+32     	; 0x36a <DIO_voidSetPortVal+0x6e>
 34a:	13 c0       	rjmp	.+38     	; 0x372 <DIO_voidSetPortVal+0x76>
	{
	case PORTA_REG:PORTA=Copy_u8Val;break;
 34c:	eb e3       	ldi	r30, 0x3B	; 59
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	8a 81       	ldd	r24, Y+2	; 0x02
 352:	80 83       	st	Z, r24
 354:	0e c0       	rjmp	.+28     	; 0x372 <DIO_voidSetPortVal+0x76>
	case PORTB_REG:PORTB=Copy_u8Val;break;
 356:	e8 e3       	ldi	r30, 0x38	; 56
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	8a 81       	ldd	r24, Y+2	; 0x02
 35c:	80 83       	st	Z, r24
 35e:	09 c0       	rjmp	.+18     	; 0x372 <DIO_voidSetPortVal+0x76>
	case PORTC_REG:PORTC=Copy_u8Val;break;
 360:	e5 e3       	ldi	r30, 0x35	; 53
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	8a 81       	ldd	r24, Y+2	; 0x02
 366:	80 83       	st	Z, r24
 368:	04 c0       	rjmp	.+8      	; 0x372 <DIO_voidSetPortVal+0x76>
	case PORTD_REG:PORTD=Copy_u8Val;break;
 36a:	e2 e3       	ldi	r30, 0x32	; 50
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	80 83       	st	Z, r24
	}
}
 372:	0f 90       	pop	r0
 374:	0f 90       	pop	r0
 376:	0f 90       	pop	r0
 378:	0f 90       	pop	r0
 37a:	cf 91       	pop	r28
 37c:	df 91       	pop	r29
 37e:	08 95       	ret

00000380 <DIO_voidSetPinVal>:

void DIO_voidSetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin,u8 Copy_u8Val)
{
 380:	df 93       	push	r29
 382:	cf 93       	push	r28
 384:	cd b7       	in	r28, 0x3d	; 61
 386:	de b7       	in	r29, 0x3e	; 62
 388:	27 97       	sbiw	r28, 0x07	; 7
 38a:	0f b6       	in	r0, 0x3f	; 63
 38c:	f8 94       	cli
 38e:	de bf       	out	0x3e, r29	; 62
 390:	0f be       	out	0x3f, r0	; 63
 392:	cd bf       	out	0x3d, r28	; 61
 394:	89 83       	std	Y+1, r24	; 0x01
 396:	6a 83       	std	Y+2, r22	; 0x02
 398:	4b 83       	std	Y+3, r20	; 0x03
	if (Copy_u8Pin <=7)
 39a:	8a 81       	ldd	r24, Y+2	; 0x02
 39c:	88 30       	cpi	r24, 0x08	; 8
 39e:	08 f0       	brcs	.+2      	; 0x3a2 <DIO_voidSetPinVal+0x22>
 3a0:	ec c0       	rjmp	.+472    	; 0x57a <DIO_voidSetPinVal+0x1fa>
	{
		if (Copy_u8Val==PIN_VAL_HIGH)
 3a2:	8b 81       	ldd	r24, Y+3	; 0x03
 3a4:	81 30       	cpi	r24, 0x01	; 1
 3a6:	09 f0       	breq	.+2      	; 0x3aa <DIO_voidSetPinVal+0x2a>
 3a8:	70 c0       	rjmp	.+224    	; 0x48a <DIO_voidSetPinVal+0x10a>
		{
			switch(Copy_u8Port)
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	28 2f       	mov	r18, r24
 3ae:	30 e0       	ldi	r19, 0x00	; 0
 3b0:	3f 83       	std	Y+7, r19	; 0x07
 3b2:	2e 83       	std	Y+6, r18	; 0x06
 3b4:	8e 81       	ldd	r24, Y+6	; 0x06
 3b6:	9f 81       	ldd	r25, Y+7	; 0x07
 3b8:	82 30       	cpi	r24, 0x02	; 2
 3ba:	91 05       	cpc	r25, r1
 3bc:	51 f1       	breq	.+84     	; 0x412 <DIO_voidSetPinVal+0x92>
 3be:	2e 81       	ldd	r18, Y+6	; 0x06
 3c0:	3f 81       	ldd	r19, Y+7	; 0x07
 3c2:	23 30       	cpi	r18, 0x03	; 3
 3c4:	31 05       	cpc	r19, r1
 3c6:	34 f4       	brge	.+12     	; 0x3d4 <DIO_voidSetPinVal+0x54>
 3c8:	8e 81       	ldd	r24, Y+6	; 0x06
 3ca:	9f 81       	ldd	r25, Y+7	; 0x07
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	91 05       	cpc	r25, r1
 3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_voidSetPinVal+0x6a>
 3d2:	d3 c0       	rjmp	.+422    	; 0x57a <DIO_voidSetPinVal+0x1fa>
 3d4:	2e 81       	ldd	r18, Y+6	; 0x06
 3d6:	3f 81       	ldd	r19, Y+7	; 0x07
 3d8:	23 30       	cpi	r18, 0x03	; 3
 3da:	31 05       	cpc	r19, r1
 3dc:	71 f1       	breq	.+92     	; 0x43a <DIO_voidSetPinVal+0xba>
 3de:	8e 81       	ldd	r24, Y+6	; 0x06
 3e0:	9f 81       	ldd	r25, Y+7	; 0x07
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	91 05       	cpc	r25, r1
 3e6:	e9 f1       	breq	.+122    	; 0x462 <DIO_voidSetPinVal+0xe2>
 3e8:	c8 c0       	rjmp	.+400    	; 0x57a <DIO_voidSetPinVal+0x1fa>
			{
			case PORTA_REG : SET_BIT(PORTA,Copy_u8Pin);break;
 3ea:	ab e3       	ldi	r26, 0x3B	; 59
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	eb e3       	ldi	r30, 0x3B	; 59
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	28 2f       	mov	r18, r24
 3fa:	30 e0       	ldi	r19, 0x00	; 0
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	02 2e       	mov	r0, r18
 402:	02 c0       	rjmp	.+4      	; 0x408 <DIO_voidSetPinVal+0x88>
 404:	88 0f       	add	r24, r24
 406:	99 1f       	adc	r25, r25
 408:	0a 94       	dec	r0
 40a:	e2 f7       	brpl	.-8      	; 0x404 <DIO_voidSetPinVal+0x84>
 40c:	84 2b       	or	r24, r20
 40e:	8c 93       	st	X, r24
 410:	b4 c0       	rjmp	.+360    	; 0x57a <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG : SET_BIT(PORTB,Copy_u8Pin);break;
 412:	a8 e3       	ldi	r26, 0x38	; 56
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e8 e3       	ldi	r30, 0x38	; 56
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	48 2f       	mov	r20, r24
 41e:	8a 81       	ldd	r24, Y+2	; 0x02
 420:	28 2f       	mov	r18, r24
 422:	30 e0       	ldi	r19, 0x00	; 0
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	02 2e       	mov	r0, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <DIO_voidSetPinVal+0xb0>
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	0a 94       	dec	r0
 432:	e2 f7       	brpl	.-8      	; 0x42c <DIO_voidSetPinVal+0xac>
 434:	84 2b       	or	r24, r20
 436:	8c 93       	st	X, r24
 438:	a0 c0       	rjmp	.+320    	; 0x57a <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG : SET_BIT(PORTC,Copy_u8Pin);break;
 43a:	a5 e3       	ldi	r26, 0x35	; 53
 43c:	b0 e0       	ldi	r27, 0x00	; 0
 43e:	e5 e3       	ldi	r30, 0x35	; 53
 440:	f0 e0       	ldi	r31, 0x00	; 0
 442:	80 81       	ld	r24, Z
 444:	48 2f       	mov	r20, r24
 446:	8a 81       	ldd	r24, Y+2	; 0x02
 448:	28 2f       	mov	r18, r24
 44a:	30 e0       	ldi	r19, 0x00	; 0
 44c:	81 e0       	ldi	r24, 0x01	; 1
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	02 2e       	mov	r0, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <DIO_voidSetPinVal+0xd8>
 454:	88 0f       	add	r24, r24
 456:	99 1f       	adc	r25, r25
 458:	0a 94       	dec	r0
 45a:	e2 f7       	brpl	.-8      	; 0x454 <DIO_voidSetPinVal+0xd4>
 45c:	84 2b       	or	r24, r20
 45e:	8c 93       	st	X, r24
 460:	8c c0       	rjmp	.+280    	; 0x57a <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG : SET_BIT(PORTD,Copy_u8Pin);break;
 462:	a2 e3       	ldi	r26, 0x32	; 50
 464:	b0 e0       	ldi	r27, 0x00	; 0
 466:	e2 e3       	ldi	r30, 0x32	; 50
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	80 81       	ld	r24, Z
 46c:	48 2f       	mov	r20, r24
 46e:	8a 81       	ldd	r24, Y+2	; 0x02
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 2e       	mov	r0, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_voidSetPinVal+0x100>
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	0a 94       	dec	r0
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_voidSetPinVal+0xfc>
 484:	84 2b       	or	r24, r20
 486:	8c 93       	st	X, r24
 488:	78 c0       	rjmp	.+240    	; 0x57a <DIO_voidSetPinVal+0x1fa>
			}
		}
		else if (Copy_u8Val==PIN_VAL_LOW)
 48a:	8b 81       	ldd	r24, Y+3	; 0x03
 48c:	88 23       	and	r24, r24
 48e:	09 f0       	breq	.+2      	; 0x492 <DIO_voidSetPinVal+0x112>
 490:	74 c0       	rjmp	.+232    	; 0x57a <DIO_voidSetPinVal+0x1fa>
		{
			switch(Copy_u8Port)
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	28 2f       	mov	r18, r24
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	3d 83       	std	Y+5, r19	; 0x05
 49a:	2c 83       	std	Y+4, r18	; 0x04
 49c:	8c 81       	ldd	r24, Y+4	; 0x04
 49e:	9d 81       	ldd	r25, Y+5	; 0x05
 4a0:	82 30       	cpi	r24, 0x02	; 2
 4a2:	91 05       	cpc	r25, r1
 4a4:	61 f1       	breq	.+88     	; 0x4fe <DIO_voidSetPinVal+0x17e>
 4a6:	2c 81       	ldd	r18, Y+4	; 0x04
 4a8:	3d 81       	ldd	r19, Y+5	; 0x05
 4aa:	23 30       	cpi	r18, 0x03	; 3
 4ac:	31 05       	cpc	r19, r1
 4ae:	34 f4       	brge	.+12     	; 0x4bc <DIO_voidSetPinVal+0x13c>
 4b0:	8c 81       	ldd	r24, Y+4	; 0x04
 4b2:	9d 81       	ldd	r25, Y+5	; 0x05
 4b4:	81 30       	cpi	r24, 0x01	; 1
 4b6:	91 05       	cpc	r25, r1
 4b8:	69 f0       	breq	.+26     	; 0x4d4 <DIO_voidSetPinVal+0x154>
 4ba:	5f c0       	rjmp	.+190    	; 0x57a <DIO_voidSetPinVal+0x1fa>
 4bc:	2c 81       	ldd	r18, Y+4	; 0x04
 4be:	3d 81       	ldd	r19, Y+5	; 0x05
 4c0:	23 30       	cpi	r18, 0x03	; 3
 4c2:	31 05       	cpc	r19, r1
 4c4:	89 f1       	breq	.+98     	; 0x528 <DIO_voidSetPinVal+0x1a8>
 4c6:	8c 81       	ldd	r24, Y+4	; 0x04
 4c8:	9d 81       	ldd	r25, Y+5	; 0x05
 4ca:	84 30       	cpi	r24, 0x04	; 4
 4cc:	91 05       	cpc	r25, r1
 4ce:	09 f4       	brne	.+2      	; 0x4d2 <DIO_voidSetPinVal+0x152>
 4d0:	40 c0       	rjmp	.+128    	; 0x552 <DIO_voidSetPinVal+0x1d2>
 4d2:	53 c0       	rjmp	.+166    	; 0x57a <DIO_voidSetPinVal+0x1fa>
			{
			case PORTA_REG : CLR_BIT(PORTA,Copy_u8Pin);break;
 4d4:	ab e3       	ldi	r26, 0x3B	; 59
 4d6:	b0 e0       	ldi	r27, 0x00	; 0
 4d8:	eb e3       	ldi	r30, 0x3B	; 59
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	80 81       	ld	r24, Z
 4de:	48 2f       	mov	r20, r24
 4e0:	8a 81       	ldd	r24, Y+2	; 0x02
 4e2:	28 2f       	mov	r18, r24
 4e4:	30 e0       	ldi	r19, 0x00	; 0
 4e6:	81 e0       	ldi	r24, 0x01	; 1
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	02 2e       	mov	r0, r18
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <DIO_voidSetPinVal+0x172>
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	0a 94       	dec	r0
 4f4:	e2 f7       	brpl	.-8      	; 0x4ee <DIO_voidSetPinVal+0x16e>
 4f6:	80 95       	com	r24
 4f8:	84 23       	and	r24, r20
 4fa:	8c 93       	st	X, r24
 4fc:	3e c0       	rjmp	.+124    	; 0x57a <DIO_voidSetPinVal+0x1fa>
			case PORTB_REG : CLR_BIT(PORTB,Copy_u8Pin);break;
 4fe:	a8 e3       	ldi	r26, 0x38	; 56
 500:	b0 e0       	ldi	r27, 0x00	; 0
 502:	e8 e3       	ldi	r30, 0x38	; 56
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	80 81       	ld	r24, Z
 508:	48 2f       	mov	r20, r24
 50a:	8a 81       	ldd	r24, Y+2	; 0x02
 50c:	28 2f       	mov	r18, r24
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 2e       	mov	r0, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_voidSetPinVal+0x19c>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	0a 94       	dec	r0
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_voidSetPinVal+0x198>
 520:	80 95       	com	r24
 522:	84 23       	and	r24, r20
 524:	8c 93       	st	X, r24
 526:	29 c0       	rjmp	.+82     	; 0x57a <DIO_voidSetPinVal+0x1fa>
			case PORTC_REG : CLR_BIT(PORTC,Copy_u8Pin);break;
 528:	a5 e3       	ldi	r26, 0x35	; 53
 52a:	b0 e0       	ldi	r27, 0x00	; 0
 52c:	e5 e3       	ldi	r30, 0x35	; 53
 52e:	f0 e0       	ldi	r31, 0x00	; 0
 530:	80 81       	ld	r24, Z
 532:	48 2f       	mov	r20, r24
 534:	8a 81       	ldd	r24, Y+2	; 0x02
 536:	28 2f       	mov	r18, r24
 538:	30 e0       	ldi	r19, 0x00	; 0
 53a:	81 e0       	ldi	r24, 0x01	; 1
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	02 2e       	mov	r0, r18
 540:	02 c0       	rjmp	.+4      	; 0x546 <DIO_voidSetPinVal+0x1c6>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	0a 94       	dec	r0
 548:	e2 f7       	brpl	.-8      	; 0x542 <DIO_voidSetPinVal+0x1c2>
 54a:	80 95       	com	r24
 54c:	84 23       	and	r24, r20
 54e:	8c 93       	st	X, r24
 550:	14 c0       	rjmp	.+40     	; 0x57a <DIO_voidSetPinVal+0x1fa>
			case PORTD_REG : CLR_BIT(PORTD,Copy_u8Pin);break;
 552:	a2 e3       	ldi	r26, 0x32	; 50
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e2 e3       	ldi	r30, 0x32	; 50
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	48 2f       	mov	r20, r24
 55e:	8a 81       	ldd	r24, Y+2	; 0x02
 560:	28 2f       	mov	r18, r24
 562:	30 e0       	ldi	r19, 0x00	; 0
 564:	81 e0       	ldi	r24, 0x01	; 1
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	02 2e       	mov	r0, r18
 56a:	02 c0       	rjmp	.+4      	; 0x570 <DIO_voidSetPinVal+0x1f0>
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	0a 94       	dec	r0
 572:	e2 f7       	brpl	.-8      	; 0x56c <DIO_voidSetPinVal+0x1ec>
 574:	80 95       	com	r24
 576:	84 23       	and	r24, r20
 578:	8c 93       	st	X, r24
			}
		}
	}
}
 57a:	27 96       	adiw	r28, 0x07	; 7
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	f8 94       	cli
 580:	de bf       	out	0x3e, r29	; 62
 582:	0f be       	out	0x3f, r0	; 63
 584:	cd bf       	out	0x3d, r28	; 61
 586:	cf 91       	pop	r28
 588:	df 91       	pop	r29
 58a:	08 95       	ret

0000058c <DIO_u8GetPinVal>:


u8 DIO_u8GetPinVal(u8 Copy_u8Port,u8 Copy_u8Pin)
{
 58c:	df 93       	push	r29
 58e:	cf 93       	push	r28
 590:	00 d0       	rcall	.+0      	; 0x592 <DIO_u8GetPinVal+0x6>
 592:	00 d0       	rcall	.+0      	; 0x594 <DIO_u8GetPinVal+0x8>
 594:	0f 92       	push	r0
 596:	cd b7       	in	r28, 0x3d	; 61
 598:	de b7       	in	r29, 0x3e	; 62
 59a:	8a 83       	std	Y+2, r24	; 0x02
 59c:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Realing=0;
 59e:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin <=7)
 5a0:	8b 81       	ldd	r24, Y+3	; 0x03
 5a2:	88 30       	cpi	r24, 0x08	; 8
 5a4:	08 f0       	brcs	.+2      	; 0x5a8 <DIO_u8GetPinVal+0x1c>
 5a6:	67 c0       	rjmp	.+206    	; 0x676 <DIO_u8GetPinVal+0xea>
	{
		switch(Copy_u8Port)
 5a8:	8a 81       	ldd	r24, Y+2	; 0x02
 5aa:	28 2f       	mov	r18, r24
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	3d 83       	std	Y+5, r19	; 0x05
 5b0:	2c 83       	std	Y+4, r18	; 0x04
 5b2:	4c 81       	ldd	r20, Y+4	; 0x04
 5b4:	5d 81       	ldd	r21, Y+5	; 0x05
 5b6:	42 30       	cpi	r20, 0x02	; 2
 5b8:	51 05       	cpc	r21, r1
 5ba:	41 f1       	breq	.+80     	; 0x60c <DIO_u8GetPinVal+0x80>
 5bc:	8c 81       	ldd	r24, Y+4	; 0x04
 5be:	9d 81       	ldd	r25, Y+5	; 0x05
 5c0:	83 30       	cpi	r24, 0x03	; 3
 5c2:	91 05       	cpc	r25, r1
 5c4:	34 f4       	brge	.+12     	; 0x5d2 <DIO_u8GetPinVal+0x46>
 5c6:	2c 81       	ldd	r18, Y+4	; 0x04
 5c8:	3d 81       	ldd	r19, Y+5	; 0x05
 5ca:	21 30       	cpi	r18, 0x01	; 1
 5cc:	31 05       	cpc	r19, r1
 5ce:	61 f0       	breq	.+24     	; 0x5e8 <DIO_u8GetPinVal+0x5c>
 5d0:	52 c0       	rjmp	.+164    	; 0x676 <DIO_u8GetPinVal+0xea>
 5d2:	4c 81       	ldd	r20, Y+4	; 0x04
 5d4:	5d 81       	ldd	r21, Y+5	; 0x05
 5d6:	43 30       	cpi	r20, 0x03	; 3
 5d8:	51 05       	cpc	r21, r1
 5da:	51 f1       	breq	.+84     	; 0x630 <DIO_u8GetPinVal+0xa4>
 5dc:	8c 81       	ldd	r24, Y+4	; 0x04
 5de:	9d 81       	ldd	r25, Y+5	; 0x05
 5e0:	84 30       	cpi	r24, 0x04	; 4
 5e2:	91 05       	cpc	r25, r1
 5e4:	b9 f1       	breq	.+110    	; 0x654 <DIO_u8GetPinVal+0xc8>
 5e6:	47 c0       	rjmp	.+142    	; 0x676 <DIO_u8GetPinVal+0xea>
		{
		case PORTA_REG : Local_u8Realing=GET_BIT(PINA,Copy_u8Pin);break;
 5e8:	e9 e3       	ldi	r30, 0x39	; 57
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	8b 81       	ldd	r24, Y+3	; 0x03
 5f4:	88 2f       	mov	r24, r24
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	a9 01       	movw	r20, r18
 5fa:	02 c0       	rjmp	.+4      	; 0x600 <DIO_u8GetPinVal+0x74>
 5fc:	55 95       	asr	r21
 5fe:	47 95       	ror	r20
 600:	8a 95       	dec	r24
 602:	e2 f7       	brpl	.-8      	; 0x5fc <DIO_u8GetPinVal+0x70>
 604:	ca 01       	movw	r24, r20
 606:	81 70       	andi	r24, 0x01	; 1
 608:	89 83       	std	Y+1, r24	; 0x01
 60a:	35 c0       	rjmp	.+106    	; 0x676 <DIO_u8GetPinVal+0xea>
		case PORTB_REG : Local_u8Realing=GET_BIT(PINB,Copy_u8Pin);break;
 60c:	e6 e3       	ldi	r30, 0x36	; 54
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	80 81       	ld	r24, Z
 612:	28 2f       	mov	r18, r24
 614:	30 e0       	ldi	r19, 0x00	; 0
 616:	8b 81       	ldd	r24, Y+3	; 0x03
 618:	88 2f       	mov	r24, r24
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	a9 01       	movw	r20, r18
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_u8GetPinVal+0x98>
 620:	55 95       	asr	r21
 622:	47 95       	ror	r20
 624:	8a 95       	dec	r24
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_u8GetPinVal+0x94>
 628:	ca 01       	movw	r24, r20
 62a:	81 70       	andi	r24, 0x01	; 1
 62c:	89 83       	std	Y+1, r24	; 0x01
 62e:	23 c0       	rjmp	.+70     	; 0x676 <DIO_u8GetPinVal+0xea>
		case PORTC_REG : Local_u8Realing=GET_BIT(PINC,Copy_u8Pin);break;
 630:	e3 e3       	ldi	r30, 0x33	; 51
 632:	f0 e0       	ldi	r31, 0x00	; 0
 634:	80 81       	ld	r24, Z
 636:	28 2f       	mov	r18, r24
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	88 2f       	mov	r24, r24
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	a9 01       	movw	r20, r18
 642:	02 c0       	rjmp	.+4      	; 0x648 <DIO_u8GetPinVal+0xbc>
 644:	55 95       	asr	r21
 646:	47 95       	ror	r20
 648:	8a 95       	dec	r24
 64a:	e2 f7       	brpl	.-8      	; 0x644 <DIO_u8GetPinVal+0xb8>
 64c:	ca 01       	movw	r24, r20
 64e:	81 70       	andi	r24, 0x01	; 1
 650:	89 83       	std	Y+1, r24	; 0x01
 652:	11 c0       	rjmp	.+34     	; 0x676 <DIO_u8GetPinVal+0xea>
		case PORTD_REG : Local_u8Realing=GET_BIT(PIND,Copy_u8Pin);break;
 654:	e0 e3       	ldi	r30, 0x30	; 48
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	80 81       	ld	r24, Z
 65a:	28 2f       	mov	r18, r24
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	8b 81       	ldd	r24, Y+3	; 0x03
 660:	88 2f       	mov	r24, r24
 662:	90 e0       	ldi	r25, 0x00	; 0
 664:	a9 01       	movw	r20, r18
 666:	02 c0       	rjmp	.+4      	; 0x66c <DIO_u8GetPinVal+0xe0>
 668:	55 95       	asr	r21
 66a:	47 95       	ror	r20
 66c:	8a 95       	dec	r24
 66e:	e2 f7       	brpl	.-8      	; 0x668 <DIO_u8GetPinVal+0xdc>
 670:	ca 01       	movw	r24, r20
 672:	81 70       	andi	r24, 0x01	; 1
 674:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_u8Realing;
 676:	89 81       	ldd	r24, Y+1	; 0x01
}
 678:	0f 90       	pop	r0
 67a:	0f 90       	pop	r0
 67c:	0f 90       	pop	r0
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	cf 91       	pop	r28
 684:	df 91       	pop	r29
 686:	08 95       	ret

00000688 <SPI_voidIntMstr>:
#include "SPI_private.h"
#include "SPI_interface.h"


void SPI_voidIntMstr(void)
{
 688:	df 93       	push	r29
 68a:	cf 93       	push	r28
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
	//int as a master
SET_BIT(SPCR,SPCR_MSTR);
 690:	ad e2       	ldi	r26, 0x2D	; 45
 692:	b0 e0       	ldi	r27, 0x00	; 0
 694:	ed e2       	ldi	r30, 0x2D	; 45
 696:	f0 e0       	ldi	r31, 0x00	; 0
 698:	80 81       	ld	r24, Z
 69a:	80 61       	ori	r24, 0x10	; 16
 69c:	8c 93       	st	X, r24
// spi enable
SET_BIT(SPCR,SPCR_SPE);
 69e:	ad e2       	ldi	r26, 0x2D	; 45
 6a0:	b0 e0       	ldi	r27, 0x00	; 0
 6a2:	ed e2       	ldi	r30, 0x2D	; 45
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	80 81       	ld	r24, Z
 6a8:	80 64       	ori	r24, 0x40	; 64
 6aa:	8c 93       	st	X, r24
// prescaler 64  is only at master becaouse only the master generates clock
SET_BIT(SPCR,SPCR_SPR0);
 6ac:	ad e2       	ldi	r26, 0x2D	; 45
 6ae:	b0 e0       	ldi	r27, 0x00	; 0
 6b0:	ed e2       	ldi	r30, 0x2D	; 45
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	80 81       	ld	r24, Z
 6b6:	81 60       	ori	r24, 0x01	; 1
 6b8:	8c 93       	st	X, r24
SET_BIT(SPCR,SPCR_SPR1);
 6ba:	ad e2       	ldi	r26, 0x2D	; 45
 6bc:	b0 e0       	ldi	r27, 0x00	; 0
 6be:	ed e2       	ldi	r30, 0x2D	; 45
 6c0:	f0 e0       	ldi	r31, 0x00	; 0
 6c2:	80 81       	ld	r24, Z
 6c4:	82 60       	ori	r24, 0x02	; 2
 6c6:	8c 93       	st	X, r24
SET_BIT(SPSR,SPSR_SPI2X);
 6c8:	ae e2       	ldi	r26, 0x2E	; 46
 6ca:	b0 e0       	ldi	r27, 0x00	; 0
 6cc:	ee e2       	ldi	r30, 0x2E	; 46
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	80 81       	ld	r24, Z
 6d2:	81 60       	ori	r24, 0x01	; 1
 6d4:	8c 93       	st	X, r24
}
 6d6:	cf 91       	pop	r28
 6d8:	df 91       	pop	r29
 6da:	08 95       	ret

000006dc <SPI_voidIntSlave>:
void SPI_voidIntSlave(void)
{
 6dc:	df 93       	push	r29
 6de:	cf 93       	push	r28
 6e0:	cd b7       	in	r28, 0x3d	; 61
 6e2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
 6e4:	ad e2       	ldi	r26, 0x2D	; 45
 6e6:	b0 e0       	ldi	r27, 0x00	; 0
 6e8:	ed e2       	ldi	r30, 0x2D	; 45
 6ea:	f0 e0       	ldi	r31, 0x00	; 0
 6ec:	80 81       	ld	r24, Z
 6ee:	8f 7e       	andi	r24, 0xEF	; 239
 6f0:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
 6f2:	ad e2       	ldi	r26, 0x2D	; 45
 6f4:	b0 e0       	ldi	r27, 0x00	; 0
 6f6:	ed e2       	ldi	r30, 0x2D	; 45
 6f8:	f0 e0       	ldi	r31, 0x00	; 0
 6fa:	80 81       	ld	r24, Z
 6fc:	80 64       	ori	r24, 0x40	; 64
 6fe:	8c 93       	st	X, r24
}
 700:	cf 91       	pop	r28
 702:	df 91       	pop	r29
 704:	08 95       	ret

00000706 <SPI_u8Transeve>:
u8 SPI_u8Transeve(u8 Copy_Data)
{
 706:	df 93       	push	r29
 708:	cf 93       	push	r28
 70a:	0f 92       	push	r0
 70c:	cd b7       	in	r28, 0x3d	; 61
 70e:	de b7       	in	r29, 0x3e	; 62
 710:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_Data;
 712:	ef e2       	ldi	r30, 0x2F	; 47
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	89 81       	ldd	r24, Y+1	; 0x01
 718:	80 83       	st	Z, r24
	while(!GET_BIT(SPSR,SPSR_SPIF));
 71a:	ee e2       	ldi	r30, 0x2E	; 46
 71c:	f0 e0       	ldi	r31, 0x00	; 0
 71e:	80 81       	ld	r24, Z
 720:	88 23       	and	r24, r24
 722:	dc f7       	brge	.-10     	; 0x71a <SPI_u8Transeve+0x14>
	return SPDR;
 724:	ef e2       	ldi	r30, 0x2F	; 47
 726:	f0 e0       	ldi	r31, 0x00	; 0
 728:	80 81       	ld	r24, Z
}
 72a:	0f 90       	pop	r0
 72c:	cf 91       	pop	r28
 72e:	df 91       	pop	r29
 730:	08 95       	ret

00000732 <main>:
#include "DIO_interface.h"
#include "SPI_interface.h"



int main (void){
 732:	df 93       	push	r29
 734:	cf 93       	push	r28
 736:	cd b7       	in	r28, 0x3d	; 61
 738:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDir(PORTB_REG,PIN5,PIN_DIR_OUT);
 73a:	82 e0       	ldi	r24, 0x02	; 2
 73c:	65 e0       	ldi	r22, 0x05	; 5
 73e:	41 e0       	ldi	r20, 0x01	; 1
 740:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTB_REG,PIN4,PIN_DIR_OUT);
 744:	82 e0       	ldi	r24, 0x02	; 2
 746:	64 e0       	ldi	r22, 0x04	; 4
 748:	41 e0       	ldi	r20, 0x01	; 1
 74a:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_voidSetPinDir>
	DIO_voidSetPinVal(PORTB_REG,PIN4,PIN_VAL_LOW);
 74e:	82 e0       	ldi	r24, 0x02	; 2
 750:	64 e0       	ldi	r22, 0x04	; 4
 752:	40 e0       	ldi	r20, 0x00	; 0
 754:	0e 94 c0 01 	call	0x380	; 0x380 <DIO_voidSetPinVal>

	DIO_voidSetPinDir(PORTB_REG,PIN6,PIN_DIR_IN);
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	66 e0       	ldi	r22, 0x06	; 6
 75c:	40 e0       	ldi	r20, 0x00	; 0
 75e:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_voidSetPinDir>
	DIO_voidSetPinDir(PORTB_REG,PIN7,PIN_DIR_OUT);
 762:	82 e0       	ldi	r24, 0x02	; 2
 764:	67 e0       	ldi	r22, 0x07	; 7
 766:	41 e0       	ldi	r20, 0x01	; 1
 768:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_voidSetPinDir>
	//DIO_voidSetPinVal(PORTB_REG,PIN7,PIN_VAL_LOW);


SPI_voidIntMstr();
 76c:	0e 94 44 03 	call	0x688	; 0x688 <SPI_voidIntMstr>
while(1){

	SPI_u8Transeve(5);
 770:	85 e0       	ldi	r24, 0x05	; 5
 772:	0e 94 83 03 	call	0x706	; 0x706 <SPI_u8Transeve>
 776:	fc cf       	rjmp	.-8      	; 0x770 <main+0x3e>

00000778 <_exit>:
 778:	f8 94       	cli

0000077a <__stop_program>:
 77a:	ff cf       	rjmp	.-2      	; 0x77a <__stop_program>
